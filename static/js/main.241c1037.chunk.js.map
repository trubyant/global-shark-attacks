{"version":3,"sources":["hooks/useSessionStorage.js","components/shared/DateRangePicker.js","components/shared/RegionSelector.js","components/GlobalSummary/SummaryBoxes.js","hooks/useD3Chart.js","components/GlobalSummary/FatalityPieChart.js","components/GlobalSummary/CountryPieChart.js","components/GlobalSummary/TimeSeriesChart.js","components/GlobalSummary/index.js","components/CountryBar/BarChart.js","components/CountryBar/YearSlider.js","components/CountryBar/RegionSelector.js","components/CountryBar/index.js","components/MonthlyRadar/RadarChart.js","components/MonthlyRadar/ZoomControls.js","components/MonthlyRadar/ChartLegend.js","components/MonthlyRadar/index.js","components/AboutApp/index.js","App.js","reportWebVitals.js","index.js"],"names":["useSessionStorage","key","initialValue","storedValue","setStoredValue","useState","item","sessionStorage","getItem","JSON","parse","error","console","useEffect","setItem","stringify","DateRangePicker","_ref","dateRange","onDateRangeChange","minYear","maxYear","className","startYearInput","setStartYearInput","start","toString","endYearInput","setEndYearInput","end","yearInputError","setYearInputError","React","createElement","htmlFor","type","id","min","max","value","onChange","e","target","onClick","applyDateRange","parseInt","isNaN","RegionSelector","title","regions","selectedRegions","onSelectionChange","maxSelections","sortOrder","onSortOrderChange","regionCounts","searchPlaceholder","searchTerm","setSearchTerm","showDropdown","setShowDropdown","filteredRegions","filter","region","includes","toLowerCase","toggleRegion","r","length","map","index","style","backgroundColor","placeholder","onFocus","onBlur","setTimeout","_regionCounts$region","onMouseDown","preventDefault","total","SummaryBoxes","totalReports","useD3Chart","renderFunction","dependencies","arguments","undefined","ref","useRef","current","d3","selectAll","remove","currentRef","FatalityPieChart","fatalData","fatalPercentage","fatalityColors","svgRef","svg","radius","Math","height","append","attr","width","text","chartGroup","pie","d","sort","arc","innerRadius","outerRadius","data","enter","name","on","event","reduce","sum","percent","toFixed","html","pageX","pageY","legendG","legend1","legend2","legend3","CountryPieChart","countryData","topRegionName","topRegionPercentage","i","legendItems","country","color","itemWidth","floor","forEach","row","col","displayName","substring","legendItem","TimeSeriesChart","selectedCountries","countryCounts","lineChartRef","margin","lineData","yearlyData","points","year","push","values","x","domain","range","maxValue","countryMax","ceil","y","yearRange","tickStep","ticks","unshift","a","b","select","call","tickValues","tickFormat","countryColors","line","curve","hoverLine","mouseX","this","round","invert","tooltipContent","yearData","find","legendY","startX","size","GlobalSummaryChart","setDateRange","setSelectedCountries","setSortOrder","allCountries","setAllCountries","setCountryCounts","setTotalReports","setFatalPercentage","setTopRegionPercentage","setTopRegionName","setFatalData","setCountryData","parsedData","sharkData","Date","attackYear","getFullYear","fatalCount","Fatal","nonFatalCount","unknownCount","counts","Country","fatal","nonFatal","unknown","globalYearlyData","allCountriesData","Object","entries","_ref2","totalAttacks","significantCountries","otherCountriesSum","finalCountryData","topRegion","topRegPercent","countries","keys","Boolean","BarChart","currentYear","displayMode","customCountries","filteredData","countByCountryAndFatality","slice","maxCount","xMax","roundedMax","padding","each","words","split","reverse","dy","parseFloat","word","lineNumber","tspan","pop","join","node","getComputedTextLength","colors","fatalPercent","nonFatalPercent","unknownPercent","y0","bandwidth","barGroup","legendX","YearSlider","onYearChange","onDisplayModeChange","onCustomCountriesChange","countriesInRange","filteredCountries","checked","c","toggleCountry","CountryBarChart","setCurrentYear","setDisplayMode","setCustomCountries","setCountriesInRange","Set","dataInRange","countriesWithData","prev","RadarChart","zoom","chartPosition","chartPositionRef","setChartPosition","activeRegions","regionColors","fill","stroke","drag","dx","allDataPoints","months","angleSlice","PI","rScale","gridGroup","axes","cos","sin","angle","labelRadius","drawEmptyChart","monthlyData","monthlyCountsByRegion","Array","month","getMonth","processDataForChart","monthValues","regionMax","getMaxValue","gridStep","drawGridAndAxes","radarLine","dataPoints","datum","drawRadarPaths","regionIndex","indexOf","labelGroup","replace","nonZeroPoints","labelPositions","positions","j","p1","p2","distance","sqrt","atan2","pushDistance","calculateLabelPositions","showRegionValues","ZoomControls","setZoom","resetView","ChartLegend","toggleActiveRegion","MonthlyRadarChart","setSelectedRegions","allRegions","setAllRegions","setRegionCounts","setActiveRegions","globalTotal","AboutApp","isOpen","onClose","textAlign","App","activeTab","setActiveTab","hasRenderedGlobal","setHasRenderedGlobal","hasRenderedCountry","setHasRenderedCountry","hasRenderedMonthly","setHasRenderedMonthly","isAboutOpen","setIsAboutOpen","display","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.241c1037.chunk.js","sourcesContent":["// src/hooks/useSessionStorage.js\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport function useSessionStorage(key, initialValue) {\r\n  // -----------------------------\r\n  // initialize state from session storage or use default value\r\n  // -----------------------------\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // attempt to get stored value from sessionStorage\r\n      const item = sessionStorage.getItem(key);\r\n      // return parsed stored value if exists, otherwise use initial value\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // if error occurs (e.g., invalid JSON), log and return initial value\r\n      console.error(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // -----------------------------\r\n  // update session storage when storedValue changes\r\n  // -----------------------------\r\n  useEffect(() => {\r\n    try {\r\n      // stringify and store value in sessionStorage\r\n      sessionStorage.setItem(key, JSON.stringify(storedValue));\r\n    } catch (error) {\r\n      // log any errors that occur during storage\r\n      console.error(error);\r\n    }\r\n  }, [key, storedValue]);\r\n\r\n  // return state value and setter as array\r\n  return [storedValue, setStoredValue];\r\n}","// src/components/shared/DateRangePicker.js\r\nimport React, { useState } from 'react';\r\n\r\nexport function DateRangePicker({ \r\n  dateRange, \r\n  onDateRangeChange, \r\n  minYear = 1900, \r\n  maxYear = 2023,\r\n  className = \"\"\r\n}) {\r\n  // -----------------------------\r\n  // local state for input fields and validation\r\n  // -----------------------------\r\n  const [startYearInput, setStartYearInput] = useState(dateRange.start.toString());\r\n  const [endYearInput, setEndYearInput] = useState(dateRange.end.toString());\r\n  const [yearInputError, setYearInputError] = useState('');\r\n  \r\n  // handle applying date range with validation\r\n  const applyDateRange = () => {\r\n    const start = parseInt(startYearInput);\r\n    const end = parseInt(endYearInput);\r\n    \r\n    // validate that inputs are valid numbers\r\n    if (isNaN(start) || isNaN(end)) {\r\n      setYearInputError('Please enter valid years');\r\n      return;\r\n    }\r\n    \r\n    // validate start year is within allowed range\r\n    if (start < minYear || start > maxYear) {\r\n      setYearInputError(`Start year must be between ${minYear} and ${maxYear}`);\r\n      return;\r\n    }\r\n    \r\n    // validate end year is within allowed range\r\n    if (end < minYear || end > maxYear) {\r\n      setYearInputError(`End year must be between ${minYear} and ${maxYear}`);\r\n      return;\r\n    }\r\n    \r\n    // validate end year is not before start year\r\n    if (end < start) {\r\n      setYearInputError('End year must be greater than or equal to start year');\r\n      return;\r\n    }\r\n    \r\n    // if all validations pass, apply the date range\r\n    onDateRangeChange({ start, end });\r\n    setYearInputError(''); // clear any previous errors\r\n  };\r\n\r\n  return (\r\n    <div className={`date-range-controls ${className}`}>\r\n      <div className=\"date-range-controls-inner\">\r\n        <h4>Date Range</h4>\r\n        <div className=\"date-range-inputs\">\r\n          {/* start year input */}\r\n          <div className=\"year-input\">\r\n            <label htmlFor=\"start-year\">From:</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"start-year\"\r\n              min={minYear}\r\n              max={maxYear}\r\n              value={startYearInput}\r\n              onChange={(e) => setStartYearInput(e.target.value)}\r\n            />\r\n          </div>\r\n          \r\n          {/* end year input */}\r\n          <div className=\"year-input\">\r\n            <label htmlFor=\"end-year\">To:</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"end-year\"\r\n              min={minYear}\r\n              max={maxYear}\r\n              value={endYearInput}\r\n              onChange={(e) => setEndYearInput(e.target.value)}\r\n            />\r\n          </div>\r\n          \r\n          {/* apply button */}\r\n          <button \r\n            onClick={applyDateRange}\r\n            className=\"apply-button\"\r\n          >\r\n            Apply\r\n          </button>\r\n        </div>\r\n        \r\n        {/* error message, only shown when there's an error */}\r\n        {yearInputError && <div className=\"error-message\">{yearInputError}</div>}\r\n      </div>\r\n    </div>\r\n  );\r\n}","// src/components/shared/RegionSelector.js\r\nimport React, { useState } from 'react';\r\n\r\nexport function RegionSelector({\r\n  title = \"Display Locations\",\r\n  regions = [],\r\n  selectedRegions = [],\r\n  onSelectionChange,\r\n  maxSelections = 3,\r\n  sortOrder = 'count',\r\n  onSortOrderChange,\r\n  regionCounts = {},\r\n  className = \"\",\r\n  searchPlaceholder = \"Search locations...\"\r\n}) {\r\n  // -----------------------------\r\n  // local state\r\n  // -----------------------------\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  \r\n  // filter regions based on search term and whether they're already selected\r\n  const filteredRegions = regions\r\n    .filter(region => !selectedRegions.includes(region))\r\n    .filter(region => region.toLowerCase().includes(searchTerm.toLowerCase()));\r\n  \r\n  // toggle a region selection, add or remove from selected list\r\n  const toggleRegion = (region) => {\r\n    if (selectedRegions.includes(region)) {\r\n      onSelectionChange(selectedRegions.filter(r => r !== region));\r\n    } else if (selectedRegions.length < maxSelections) {\r\n      onSelectionChange([...selectedRegions, region]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`region-selector-container ${className}`}>\r\n      <div className=\"selection-inner\">\r\n        <h4>{title}</h4>\r\n        \r\n        {/* sorting control button */}\r\n        <div className=\"sort-control\">\r\n          <button \r\n            onClick={() => onSortOrderChange(sortOrder === 'alphabetical' ? 'count' : 'alphabetical')}\r\n            className=\"sort-button\"\r\n          >\r\n            Sort by: {sortOrder === 'alphabetical' ? 'Alphabetical' : 'Attack Count'}\r\n          </button>\r\n        </div>\r\n        \r\n        {/* display selected regions as tags */}\r\n        <div className=\"selected-regions\">\r\n          {selectedRegions.map((region, index) => (\r\n            <div key={region} className=\"selected-region-tag\">\r\n              <span \r\n                className=\"region-color-dot\" \r\n                style={{backgroundColor: `var(--region-color-${index % 3})`}}\r\n              ></span>\r\n              <span className=\"region-name\">{region}</span>\r\n              <button \r\n                className=\"remove-region-button\" \r\n                onClick={() => toggleRegion(region)}\r\n              >\r\n                ✕\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        \r\n        {/* show search box if we haven't reached max selections */}\r\n        {selectedRegions.length < maxSelections && (\r\n          <div className=\"region-selector\">\r\n            <div className=\"search-box\">\r\n              <input \r\n                type=\"text\" \r\n                placeholder={searchPlaceholder}\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value.toLowerCase())}\r\n                onFocus={() => setShowDropdown(true)}\r\n                onBlur={() => setTimeout(() => setShowDropdown(false), 150)}\r\n              />\r\n            </div>\r\n            \r\n            {/* dropdown list of available regions */}\r\n            {showDropdown && (\r\n              <div className=\"region-list\">\r\n                {filteredRegions.length > 0 ? (\r\n                  filteredRegions.map(region => (\r\n                    <div \r\n                      key={region} \r\n                      className=\"region-item\"\r\n                      onMouseDown={(e) => {\r\n                        e.preventDefault();\r\n                        toggleRegion(region);\r\n                        setSearchTerm('');\r\n                      }}\r\n                    >\r\n                      <span>{region}</span>\r\n                      <span className=\"region-count\">\r\n                        {regionCounts[region]?.total || regionCounts[region] || 0}\r\n                      </span>\r\n                    </div>\r\n                  ))\r\n                ) : (\r\n                  <div className=\"no-results\">No matching regions found</div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","// src/components/GlobalSummary/SummaryBoxes.js\r\nimport React from 'react';\r\n\r\nexport function SummaryBoxes({ totalReports, dateRange }) {\r\n  return (\r\n    <div className=\"total-reports-box\">\r\n      <div className=\"reports-number\">{totalReports}</div>\r\n      <div className=\"reports-label\">\r\n        Attacks reported\r\n        <br />\r\n        {dateRange.start} - {dateRange.end}\r\n      </div>\r\n    </div>\r\n  );\r\n}","// src/hooks/useD3Chart.js\r\nimport { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nexport function useD3Chart(renderFunction, dependencies = []) {\r\n  // create a reference to hold the DOM element\r\n  const ref = useRef();\r\n\r\n  // -----------------------------\r\n  // handle d3 rendering and cleanup\r\n  // -----------------------------\r\n  useEffect(() => {\r\n    // only proceed if the ref has been attached to a DOM element\r\n    if (!ref.current) return;\r\n    \r\n    // clear any existing chart elements before redrawing\r\n    d3.select(ref.current).selectAll(\"*\").remove();\r\n    \r\n    // store ref.current to avoid closure issues during cleanup\r\n    const currentRef = ref.current;\r\n    \r\n    // call the provided render function with the d3-selected element\r\n    renderFunction(d3.select(currentRef));\r\n    \r\n    // cleanup function to remove chart when component unmounts or dependencies change\r\n    return () => {\r\n      if (currentRef) {\r\n        d3.select(currentRef).selectAll(\"*\").remove();\r\n      }\r\n    };\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [...dependencies]); // spread dependencies to ensure it's an array literal\r\n\r\n  // return the ref to be attached to an SVG element\r\n  return ref;\r\n}","// src/components/GlobalSummary/FatalityPieChart.js\r\nimport React from 'react';\r\nimport { useD3Chart } from '../../hooks/useD3Chart';\r\nimport * as d3 from 'd3';\r\n\r\nexport function FatalityPieChart({ fatalData, fatalPercentage }) {\r\n  // -----------------------------\r\n  // colors for the chart\r\n  // -----------------------------\r\n  const fatalityColors = {\r\n    \"FATAL\": \"#e41a1c\",    // red for fatal attacks, changed from #e15759\r\n    \"NON-FATAL\": \"#4e79a7\", // blue for non-fatal attacks\r\n    \"UNKNOWN\": \"#b3b3b3\"    // gray for unknown outcome, changed from #d3d3d3\r\n  };\r\n  \r\n  const svgRef = useD3Chart((svg) => {\r\n    // skip rendering if no data\r\n    if (fatalData.length === 0) return;\r\n    \r\n    // -----------------------------\r\n    // chart setup\r\n    // -----------------------------\r\n    const width = 180;\r\n    const height = 230;\r\n    const radius = Math.min(width, height - 60) / 2;\r\n    \r\n    // add title at the top\r\n    svg.append(\"text\")\r\n      .attr(\"x\", width / 2)\r\n      .attr(\"y\", 12)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .style(\"font-size\", \"17px\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .text(\"Attacks by Fatality\");\r\n    \r\n    const chartGroup = svg.append(\"g\")\r\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2 - 20})`);\r\n    \r\n    // -----------------------------\r\n    // create pie chart\r\n    // -----------------------------\r\n    const pie = d3.pie()\r\n      .value(d => d.value)\r\n      .sort(null); // preserve original order\r\n    \r\n    const arc = d3.arc()\r\n      .innerRadius(radius * 0.6) // create donut chart with inner radius\r\n      .outerRadius(radius * 0.9);\r\n    \r\n    // draw pie segments with appropriate colors\r\n    chartGroup.selectAll(\"path\")\r\n      .data(pie(fatalData))\r\n      .enter()\r\n      .append(\"path\")\r\n      .attr(\"d\", arc)\r\n      .attr(\"fill\", d => {\r\n        // assign colors based on segment name\r\n        if (d.data.name === \"FATAL\") return fatalityColors[\"FATAL\"];\r\n        if (d.data.name === \"NON-FATAL\") return fatalityColors[\"NON-FATAL\"];\r\n        return fatalityColors[\"UNKNOWN\"];\r\n      })\r\n      .attr(\"stroke\", \"white\")\r\n      .style(\"stroke-width\", \"2px\")\r\n      .style(\"opacity\", 0.9)\r\n      .on(\"mouseover\", function(event, d) {\r\n        // show percentage on hover\r\n        const total = fatalData.reduce((sum, item) => sum + item.value, 0);\r\n        const percent = ((d.data.value / total) * 100).toFixed(1);\r\n        d3.select(\".summary-tooltip\")\r\n          .style(\"opacity\", 0.9)\r\n          .html(`${d.data.name}: ${d.data.value} (${percent}%)`)\r\n          .style(\"left\", (event.pageX + 10) + \"px\")\r\n          .style(\"top\", (event.pageY - 28) + \"px\");\r\n      })\r\n      .on(\"mouseout\", function() {\r\n        // hide tooltip when not hovering\r\n        d3.select(\".summary-tooltip\").style(\"opacity\", 0);\r\n      });\r\n    \r\n    // -----------------------------\r\n    // add center text\r\n    // -----------------------------\r\n    // add big percentage number\r\n    chartGroup.append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"-0.8em\")\r\n      .style(\"font-size\", \"17px\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .text(`${fatalPercentage}%`);\r\n    \r\n    // add description text below percentage\r\n    chartGroup.append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"0.5em\")\r\n      .style(\"font-size\", \"17px\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .text(\"FATAL\");\r\n\r\n    // add description text below percentage\r\n    chartGroup.append(\"text\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"dy\", \"1.8em\")\r\n    .style(\"font-size\", \"17px\")\r\n    .style(\"font-weight\", \"bold\")\r\n    .text(\"Attacks\");\r\n    \r\n    // -----------------------------\r\n    // add legend\r\n    // -----------------------------\r\n    const legendG = svg.append(\"g\")\r\n      .attr(\"transform\", `translate(${width/2 - 35}, ${height - 45})`)\r\n      .style(\"font-size\", \"12px\");\r\n    \r\n    // fatal legend item\r\n    const legend1 = legendG.append(\"g\").attr(\"transform\", \"translate(0, 0)\");\r\n    legend1.append(\"rect\")\r\n      .attr(\"width\", 10)\r\n      .attr(\"height\", 10)\r\n      .attr(\"fill\", fatalityColors[\"FATAL\"]);\r\n    \r\n    legend1.append(\"text\")\r\n      .attr(\"x\", 15)\r\n      .attr(\"y\", 9)\r\n      .text(\"FATAL\");\r\n    \r\n    // non-fatal legend item\r\n    const legend2 = legendG.append(\"g\").attr(\"transform\", \"translate(0, 15)\");\r\n    legend2.append(\"rect\")\r\n      .attr(\"width\", 10)\r\n      .attr(\"height\", 10)\r\n      .attr(\"fill\", fatalityColors[\"NON-FATAL\"]);\r\n    \r\n    legend2.append(\"text\")\r\n      .attr(\"x\", 15)\r\n      .attr(\"y\", 9)\r\n      .text(\"NON-FATAL\");\r\n    \r\n    // unknown legend item\r\n    const legend3 = legendG.append(\"g\").attr(\"transform\", \"translate(0, 30)\");\r\n    legend3.append(\"rect\")\r\n      .attr(\"width\", 10)\r\n      .attr(\"height\", 10)\r\n      .attr(\"fill\", fatalityColors[\"UNKNOWN\"]);\r\n    \r\n    legend3.append(\"text\")\r\n      .attr(\"x\", 15)\r\n      .attr(\"y\", 9)\r\n      .text(\"UNKNOWN\");\r\n  }, [fatalData, fatalPercentage]);\r\n\r\n  return (\r\n    <div className=\"pie-chart-container\">\r\n      <svg ref={svgRef} className=\"pie-chart-svg\" width=\"180\" height=\"230\"></svg>\r\n    </div>\r\n  );\r\n}","// src/components/GlobalSummary/CountryPieChart.js\r\nimport React from 'react';\r\nimport { useD3Chart } from '../../hooks/useD3Chart';\r\nimport * as d3 from 'd3';\r\n\r\nexport function CountryPieChart({ countryData, topRegionName, topRegionPercentage }) {\r\n  const svgRef = useD3Chart((svg) => {\r\n    // skip rendering if no data\r\n    if (countryData.length === 0) return;\r\n    \r\n    // -----------------------------\r\n    // chart setup\r\n    // -----------------------------\r\n    const width = 400;\r\n    const height = 230;\r\n    const radius = Math.min(width - 200, height - 50) / 2;\r\n    \r\n    // add title at the top\r\n    svg.append(\"text\")\r\n      .attr(\"x\", width / 2)\r\n      .attr(\"y\", 12)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .style(\"font-size\", \"17px\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .text(\"Attacks by Location (Top Contributors)\");\r\n    \r\n    const chartGroup = svg.append(\"g\")\r\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2 - 15})`);\r\n    \r\n    // -----------------------------\r\n    // create pie chart\r\n    // -----------------------------\r\n    const pie = d3.pie()\r\n      .value(d => d.value)\r\n      .sort(null);\r\n    \r\n    // use the same inner and outer radius as fatality pie chart\r\n    const arc = d3.arc()\r\n      .innerRadius(radius * 0.6)\r\n      .outerRadius(radius * 0.9);\r\n    \r\n    // calculate total for percentages\r\n    const total = countryData.reduce((sum, d) => sum + d.value, 0);\r\n    \r\n    // draw pie segments\r\n    chartGroup.selectAll(\"path\")\r\n      .data(pie(countryData))\r\n      .enter()\r\n      .append(\"path\")\r\n      .attr(\"d\", arc)\r\n      .attr(\"fill\", (d, i) => d3.schemeCategory10[i % 10])\r\n      .attr(\"stroke\", \"white\")\r\n      .style(\"stroke-width\", \"2px\")\r\n      .style(\"opacity\", 0.9)\r\n      .on(\"mouseover\", function(event, d) {\r\n        // show percentage on hover\r\n        const percent = ((d.data.value / total) * 100).toFixed(1);\r\n        d3.select(\".summary-tooltip\")\r\n          .style(\"opacity\", 0.9)\r\n          .html(`${d.data.name}: ${d.data.value} (${percent}%)`)\r\n          .style(\"left\", (event.pageX + 10) + \"px\")\r\n          .style(\"top\", (event.pageY - 28) + \"px\");\r\n      })\r\n      .on(\"mouseout\", function() {\r\n        d3.select(\".summary-tooltip\").style(\"opacity\", 0);\r\n      });\r\n    \r\n    // -----------------------------\r\n    // add center text with multiple lines\r\n    // -----------------------------\r\n    // \"most in\" text\r\n    chartGroup.append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"-1em\")\r\n      .style(\"font-size\", \"17px\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .text(\"Most in\");\r\n    \r\n    // country name\r\n    chartGroup.append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"0.5em\")\r\n      .style(\"font-size\", \"17px\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .text(topRegionName);\r\n    \r\n    // percentage\r\n    chartGroup.append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"2em\")\r\n      .style(\"font-size\", \"17px\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .text(`${topRegionPercentage}%`);\r\n    \r\n    // -----------------------------\r\n    // add legend\r\n    // -----------------------------\r\n    // calculate legend layout\r\n    const legendItems = countryData.map((country, i) => ({\r\n      name: country.name === \"OTHERS\" ? \"OTHERS (<5%)\" : country.name,\r\n      color: d3.schemeCategory10[i % 10],\r\n      index: i\r\n    }));\r\n    \r\n    // position items\r\n    const itemsPerRow = 3;\r\n    const itemHeight = 15;\r\n    const itemWidth = Math.floor((width - 40) / itemsPerRow);\r\n    \r\n    const legendG = svg.append(\"g\")\r\n      .attr(\"transform\", `translate(${width/2 - 160}, ${height - 40})`)\r\n      .style(\"font-size\", \"12px\");\r\n    \r\n    legendItems.forEach((item, i) => {\r\n      const row = Math.floor(i / itemsPerRow);\r\n      const col = i % itemsPerRow;\r\n      \r\n      // for longer country names, adjust display\r\n      let displayName = item.name;\r\n      if (displayName.length > 15 && displayName !== \"Others (< 5%)\") {\r\n        displayName = item.name.substring(0, 13) + \"...\";\r\n      }\r\n      \r\n      const legendItem = legendG.append(\"g\")\r\n        .attr(\"transform\", `translate(${col * itemWidth}, ${row * itemHeight})`);\r\n      \r\n      legendItem.append(\"rect\")\r\n        .attr(\"width\", 10)\r\n        .attr(\"height\", 10)\r\n        .attr(\"fill\", item.color);\r\n      \r\n      legendItem.append(\"text\")\r\n        .attr(\"x\", 15)\r\n        .attr(\"y\", 9)\r\n        .text(displayName);\r\n    });\r\n    \r\n  }, [countryData, topRegionName, topRegionPercentage]);\r\n\r\n  return (\r\n    <div className=\"pie-chart-container wide-pie-chart\">\r\n      <svg ref={svgRef} className=\"pie-chart-svg\" width=\"400\" height=\"230\"></svg>\r\n    </div>\r\n  );\r\n}","// src/components/GlobalSummary/TimeSeriesChart.js\r\nimport React from 'react';\r\nimport { useD3Chart } from '../../hooks/useD3Chart';\r\nimport * as d3 from 'd3';\r\n\r\nexport function TimeSeriesChart({ dateRange, selectedCountries, countryCounts }) {\r\n  const lineChartRef = useD3Chart((svg) => {\r\n    // -----------------------------\r\n    // chart setup\r\n    // -----------------------------\r\n    const margin = { top: 20, right: 30, bottom: 80, left: 60 }; \r\n    const width = 920 - margin.left - margin.right;\r\n    const height = 480 - margin.top - margin.bottom;\r\n    \r\n    svg.attr(\"width\", width + margin.left + margin.right)\r\n       .attr(\"height\", height + margin.top + margin.bottom)\r\n       .attr(\"overflow\", \"visible\")\r\n       .append(\"g\")\r\n       .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n    \r\n    // -----------------------------\r\n    // prepare data for line chart\r\n    // -----------------------------\r\n    const lineData = [];\r\n    \r\n    // add selected countries\r\n    for (const country of selectedCountries) {\r\n      if (!countryCounts[country]) continue;\r\n      \r\n      const yearlyData = countryCounts[country].yearlyData;\r\n      const points = [];\r\n      \r\n      // create data points for each year in range\r\n      for (let year = dateRange.start; year <= dateRange.end; year++) {\r\n        points.push({\r\n          year,\r\n          value: yearlyData[year] || 0,\r\n          country\r\n        });\r\n      }\r\n      \r\n      lineData.push({\r\n        country,\r\n        values: points\r\n      });\r\n    }\r\n    \r\n    // -----------------------------\r\n    // create scales\r\n    // -----------------------------\r\n    const x = d3.scaleLinear()\r\n      .domain([dateRange.start, dateRange.end])\r\n      .range([0, width]);\r\n    \r\n    // calculate max value for y-axis\r\n    let maxValue = 10; // default minimum scale\r\n    \r\n    if (lineData.length > 0) {\r\n      lineData.forEach(countryData => {\r\n        const countryMax = d3.max(countryData.values, d => d.value);\r\n        if (countryMax > maxValue) maxValue = countryMax;\r\n      });\r\n      \r\n      maxValue = Math.ceil(maxValue * 1.1);\r\n    }\r\n    \r\n    const y = d3.scaleLinear()\r\n      .domain([0, maxValue])\r\n      .range([height, 0]);\r\n    \r\n    // -----------------------------\r\n    // calculate x-axis ticks\r\n    // -----------------------------\r\n    // determine year tick interval based on date range\r\n    const yearRange = dateRange.end - dateRange.start;\r\n    let tickStep = 1;\r\n    \r\n    if (yearRange <= 1) {\r\n      tickStep = 1;\r\n    } else if (yearRange <= 20) {\r\n      tickStep = 2;\r\n    } else if (yearRange <= 50) {\r\n      tickStep = 5;\r\n    } else if (yearRange <= 100) {\r\n      tickStep = 10;\r\n    } else {\r\n      tickStep = 20;\r\n    }\r\n    \r\n    // start at a nice round year\r\n    const startTick = Math.ceil(dateRange.start / tickStep) * tickStep;\r\n    const ticks = [];\r\n    for (let year = startTick; year <= dateRange.end; year += tickStep) {\r\n      ticks.push(year);\r\n    }\r\n    \r\n    // include start and end years if they're multiples of tickStep\r\n    if (dateRange.start % tickStep === 0 && !ticks.includes(dateRange.start)) {\r\n      ticks.unshift(dateRange.start);\r\n    }\r\n    \r\n    if (dateRange.end % tickStep === 0 && !ticks.includes(dateRange.end)) {\r\n      ticks.push(dateRange.end);\r\n    }\r\n    \r\n    ticks.sort((a, b) => a - b);\r\n    \r\n    // -----------------------------\r\n    // add axes\r\n    // -----------------------------\r\n    svg.select(\"g\").append(\"g\")\r\n      .attr(\"class\", \"x-axis\")\r\n      .attr(\"transform\", `translate(0,${height})`)\r\n      .call(d3.axisBottom(x)\r\n        .tickValues(ticks)\r\n        .tickFormat(d3.format(\"d\")))\r\n      .selectAll(\"text\")\r\n      .style(\"font-size\", \"12px\");\r\n    \r\n    svg.select(\"g\").append(\"g\")\r\n      .attr(\"class\", \"y-axis\")\r\n      .call(d3.axisLeft(y))\r\n      .selectAll(\"text\")\r\n      .style(\"font-size\", \"12px\");\r\n    \r\n    // add axes labels\r\n    svg.select(\"g\").append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"x\", width / 2)\r\n      .attr(\"y\", height + 40)\r\n      .text(\"Year\")\r\n      .style(\"font-size\", \"14px\");\r\n    \r\n    svg.select(\"g\").append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n      .attr(\"y\", -margin.left + 15)\r\n      .attr(\"x\", -(height / 2))\r\n      .text(\"Number of Attacks\")\r\n      .style(\"font-size\", \"14px\");\r\n\r\n    // -----------------------------\r\n    // add grid lines\r\n    // -----------------------------\r\n    svg.select(\"g\").append(\"g\")\r\n      .attr(\"class\", \"grid\")\r\n      .selectAll(\"line\")\r\n      .data(y.ticks())\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"x1\", 0)\r\n      .attr(\"y1\", d => y(d))\r\n      .attr(\"x2\", width)\r\n      .attr(\"y2\", d => y(d))\r\n      .attr(\"stroke\", \"#e0e0e0\")\r\n      .attr(\"stroke-width\", 1)\r\n      .attr(\"stroke-dasharray\", \"3,3\");\r\n    \r\n    // -----------------------------\r\n    // handle empty state\r\n    // -----------------------------\r\n    // if no countries selected, show message\r\n    if (lineData.length === 0) {\r\n      svg.select(\"g\").append(\"text\")\r\n        .attr(\"class\", \"empty-chart-message\")\r\n        .attr(\"x\", width / 2)\r\n        .attr(\"y\", height / 2)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .style(\"font-size\", \"16px\")\r\n        .style(\"fill\", \"#666\")\r\n        .text(\"Please select one or more locations to display\");\r\n    } else {\r\n      // -----------------------------\r\n      // draw lines for each country\r\n      // -----------------------------\r\n      // color scale for countries\r\n      const countryColors = d3.scaleOrdinal()\r\n        .range([\"#4e79a7\", \"#f28e2c\", \"#59a14f\", \"#e15759\", \"#76b7b2\"]);\r\n        \r\n      // create line generator\r\n      const line = d3.line()\r\n        .x(d => x(d.year))\r\n        .y(d => y(d.value))\r\n        .curve(d3.curveMonotoneX);\r\n        \r\n      // add lines for each country\r\n      const lines = svg.select(\"g\").selectAll(\".line-group\")\r\n        .data(lineData)\r\n        .enter()\r\n        .append(\"g\")\r\n        .attr(\"class\", \"line-group\");\r\n      \r\n      lines.append(\"path\")\r\n        .attr(\"class\", \"line\")\r\n        .attr(\"d\", d => line(d.values))\r\n        .style(\"stroke\", (d, i) => countryColors(i))\r\n        .style(\"stroke-width\", 3)\r\n        .style(\"fill\", \"none\");\r\n      \r\n      // -----------------------------\r\n      // add interactive elements\r\n      // -----------------------------\r\n      // create vertical hover line\r\n      const hoverLine = svg.select(\"g\").append(\"line\")\r\n        .attr(\"class\", \"hover-line\")\r\n        .style(\"stroke\", \"#999\")\r\n        .style(\"stroke-width\", \"1px\")\r\n        .style(\"stroke-dasharray\", \"3,3\")\r\n        .style(\"opacity\", 0)\r\n        .attr(\"y1\", 0)\r\n        .attr(\"y2\", height);\r\n      \r\n      // add hover circles for each data point\r\n      lineData.forEach((countryData, i) => {\r\n        const points = svg.select(\"g\").selectAll(`.point-group-${i}`)\r\n          .data(countryData.values)\r\n          .enter()\r\n          .append(\"circle\")\r\n          .attr(\"class\", `point-group-${i}`)\r\n          .attr(\"cx\", d => x(d.year))\r\n          .attr(\"cy\", d => y(d.value))\r\n          .attr(\"r\", 0) // initially invisible\r\n          .attr(\"fill\", countryColors(i));\r\n        \r\n        // store reference to points for hover tracking\r\n        countryData.points = points;\r\n      });\r\n      \r\n      // create hover area for mouse interaction\r\n      svg.select(\"g\").append(\"rect\")\r\n        .attr(\"class\", \"hover-area\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .style(\"fill\", \"none\")\r\n        .style(\"pointer-events\", \"all\")\r\n        .on(\"mousemove\", function(event) {\r\n          const [mouseX] = d3.pointer(event, this);\r\n          const year = Math.round(x.invert(mouseX));\r\n          \r\n          if (year >= dateRange.start && year <= dateRange.end) {\r\n            // update hover line\r\n            hoverLine\r\n              .attr(\"x1\", x(year))\r\n              .attr(\"x2\", x(year))\r\n              .style(\"opacity\", 1);\r\n            \r\n            // show data points for this year\r\n            let tooltipContent = `<strong>Year: ${year}</strong><br>`;\r\n            \r\n            lineData.forEach((countryData, i) => {\r\n              const yearData = countryData.values.find(d => d.year === year);\r\n              \r\n              if (yearData) {\r\n                // update tooltip content\r\n                tooltipContent += `<div style=\"display: flex; align-items: center; margin-top: 5px;\">\r\n                  <div style=\"width: 12px; height: 12px; background-color: ${countryColors(i)}; margin-right: 5px;\"></div>\r\n                  <span>${countryData.country}: ${yearData.value} attacks</span>\r\n                </div>`;\r\n                \r\n                // highlight points\r\n                countryData.points\r\n                  .attr(\"r\", d => d.year === year ? 6 : 0)\r\n                  .attr(\"stroke\", d => d.year === year ? \"white\" : \"none\")\r\n                  .attr(\"stroke-width\", d => d.year === year ? 2 : 0);\r\n              }\r\n            });\r\n            \r\n            // show tooltip\r\n            d3.select(\".summary-tooltip\")\r\n              .html(tooltipContent)\r\n              .style(\"left\", (event.pageX + 15) + \"px\")\r\n              .style(\"top\", (event.pageY - 28) + \"px\")\r\n              .style(\"opacity\", 0.95);\r\n          }\r\n        })\r\n        .on(\"mouseout\", function() {\r\n          // hide hover elements\r\n          hoverLine.style(\"opacity\", 0);\r\n          \r\n          lineData.forEach((countryData) => {\r\n            countryData.points.attr(\"r\", 0);\r\n          });\r\n          \r\n          d3.select(\".summary-tooltip\").style(\"opacity\", 0);\r\n        });\r\n      \r\n      // -----------------------------\r\n      // create legend\r\n      // -----------------------------\r\n      const legendY = height + 70;\r\n      const legendItems = lineData.map(d => d.country);\r\n      \r\n      // center the legend items\r\n      const itemWidth = Math.min(width / legendItems.length, 250);\r\n      const totalLegendWidth = itemWidth * legendItems.length;\r\n      const startX = (width - totalLegendWidth) / 2;\r\n      \r\n      // add background for legend\r\n      svg.select(\"g\").append(\"rect\")\r\n        .attr(\"x\", -20)\r\n        .attr(\"y\", height + 50)\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", 50)\r\n        .attr(\"fill\", \"#f8f8f8\")\r\n        .attr(\"rx\", 4)\r\n        .attr(\"ry\", 4)\r\n        .attr(\"stroke\", \"#eaeaea\")\r\n        .attr(\"stroke-width\", 1);\r\n      \r\n      legendItems.forEach((country, i) => {\r\n        // calculate position\r\n        const x = startX + (i * itemWidth);\r\n        \r\n        // create legend item group\r\n        const legendItem = svg.select(\"g\").append(\"g\")\r\n          .attr(\"transform\", `translate(${x}, ${legendY})`);\r\n        \r\n        // add color box\r\n        legendItem.append(\"rect\")\r\n          .attr(\"width\", 15)\r\n          .attr(\"height\", 15)\r\n          .attr(\"fill\", countryColors(i));\r\n        \r\n        // add country name, truncate with ellipsis if needed\r\n        const displayName = country.length > 25 ? country.substring(0, 22) + \"...\" : country;\r\n        \r\n        legendItem.append(\"text\")\r\n          .attr(\"x\", 25)\r\n          .attr(\"y\", 12)\r\n          .text(displayName)\r\n          .style(\"font-size\", \"14px\");\r\n      });\r\n    }\r\n    \r\n    // -----------------------------\r\n    // create tooltip if needed\r\n    // -----------------------------\r\n    if (!d3.select(\"body\").select(\".summary-tooltip\").size()) {\r\n      d3.select(\"body\").append(\"div\")\r\n        .attr(\"class\", \"summary-tooltip\")\r\n        .style(\"opacity\", 0)\r\n        .style(\"position\", \"absolute\")\r\n        .style(\"background-color\", \"white\")\r\n        .style(\"border\", \"1px solid #ddd\")\r\n        .style(\"border-radius\", \"4px\")\r\n        .style(\"padding\", \"10px\")\r\n        .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.1)\")\r\n        .style(\"font-size\", \"14px\")\r\n        .style(\"pointer-events\", \"none\")\r\n        .style(\"z-index\", 100);\r\n    }\r\n  }, [dateRange, selectedCountries, countryCounts]);\r\n\r\n  return (\r\n    <div className=\"line-chart-container\">\r\n      <h3>Attack Trends by Location Over Time ({dateRange.start} - {dateRange.end})</h3>\r\n      <svg ref={lineChartRef} className=\"line-chart-svg\"></svg>\r\n    </div>\r\n  );\r\n}","// src/components/GlobalSummary/index.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSessionStorage } from '../../hooks/useSessionStorage';\r\nimport { DateRangePicker } from '../shared/DateRangePicker';\r\nimport { RegionSelector } from '../shared/RegionSelector';\r\nimport { SummaryBoxes } from './SummaryBoxes';\r\nimport { FatalityPieChart } from './FatalityPieChart';\r\nimport { CountryPieChart } from './CountryPieChart';\r\nimport { TimeSeriesChart } from './TimeSeriesChart';\r\nimport sharkData from '../../data/clean_shark_attacks_data.json';\r\n\r\nexport function GlobalSummaryChart() {\r\n  // -----------------------------\r\n  // state management with session storage\r\n  // -----------------------------\r\n  // date range for filtering data\r\n  const [dateRange, setDateRange] = useSessionStorage(\r\n    'globalSummaryDateRange', \r\n    { start: 1900, end: 2023 }\r\n  );\r\n  \r\n  // selected countries for comparison\r\n  const [selectedCountries, setSelectedCountries] = useSessionStorage(\r\n    'globalSummaryCountries',\r\n    []\r\n  );\r\n  \r\n  // sorting method for country display\r\n  const [sortOrder, setSortOrder] = useSessionStorage(\r\n    'globalSummarySortOrder',\r\n    'count'\r\n  );\r\n  \r\n  // -----------------------------\r\n  // derived state from processed data\r\n  // -----------------------------\r\n  // list of all available countries\r\n  const [allCountries, setAllCountries] = useState([]);\r\n  \r\n  // object containing count data for each country\r\n  const [countryCounts, setCountryCounts] = useState({});\r\n  \r\n  // summary statistics\r\n  const [totalReports, setTotalReports] = useState(0);\r\n  const [fatalPercentage, setFatalPercentage] = useState(0);\r\n  const [topRegionPercentage, setTopRegionPercentage] = useState(0);\r\n  const [topRegionName, setTopRegionName] = useState(\"USA\");\r\n  \r\n  // chart data\r\n  const [fatalData, setFatalData] = useState([]);\r\n  const [countryData, setCountryData] = useState([]);\r\n  \r\n  // -----------------------------\r\n  // data processing based on date range\r\n  // -----------------------------\r\n  useEffect(() => {\r\n    // parse dates and filter by date range\r\n    const parsedData = sharkData.map(d => ({\r\n      ...d,\r\n      Date: d.Date ? new Date(d.Date) : null\r\n    })).filter(d => {\r\n      if (!d.Date) return false;\r\n      const attackYear = d.Date.getFullYear();\r\n      return attackYear >= dateRange.start && attackYear <= dateRange.end;\r\n    });\r\n\r\n    // calculate total reports\r\n    setTotalReports(parsedData.length);\r\n    \r\n    // -----------------------------\r\n    // process fatality data for pie chart\r\n    // -----------------------------\r\n    const fatalCount = parsedData.filter(d => d.Fatal === true).length;\r\n    const nonFatalCount = parsedData.filter(d => d.Fatal === false).length;\r\n    const unknownCount = parsedData.length - fatalCount - nonFatalCount;\r\n    \r\n    setFatalData([\r\n      { name: \"FATAL\", value: fatalCount },\r\n      { name: \"NON-FATAL\", value: nonFatalCount },\r\n      { name: \"UNKNOWN\", value: unknownCount }\r\n    ]);\r\n    \r\n    setFatalPercentage(((fatalCount / parsedData.length) * 100).toFixed(1));\r\n    \r\n    // -----------------------------\r\n    // process country data for charts\r\n    // -----------------------------\r\n    const counts = {};\r\n    \r\n    parsedData.forEach(d => {\r\n      if (!d.Country) return;\r\n      \r\n      // initialize country data if it doesn't exist\r\n      if (!counts[d.Country]) {\r\n        counts[d.Country] = {\r\n          total: 0,\r\n          yearlyData: {},\r\n          fatal: 0,\r\n          nonFatal: 0,\r\n          unknown: 0\r\n        };\r\n      }\r\n      \r\n      counts[d.Country].total += 1;\r\n      \r\n      // track fatality status\r\n      if (d.Fatal === true) {\r\n        counts[d.Country].fatal += 1;\r\n      } else if (d.Fatal === false) {\r\n        counts[d.Country].nonFatal += 1;\r\n      } else {\r\n        counts[d.Country].unknown += 1;\r\n      }\r\n      \r\n      // track yearly data for line chart\r\n      if (d.Date) {\r\n        const year = d.Date.getFullYear();\r\n        if (!counts[d.Country].yearlyData[year]) {\r\n          counts[d.Country].yearlyData[year] = 0;\r\n        }\r\n        counts[d.Country].yearlyData[year] += 1;\r\n      }\r\n    });\r\n    \r\n    // -----------------------------\r\n    // add global option\r\n    // -----------------------------\r\n    const globalYearlyData = {};\r\n    parsedData.forEach(d => {\r\n      if (d.Date) {\r\n        const year = d.Date.getFullYear();\r\n        if (!globalYearlyData[year]) {\r\n          globalYearlyData[year] = 0;\r\n        }\r\n        globalYearlyData[year] += 1;\r\n      }\r\n    });\r\n    \r\n    counts[\"GLOBAL\"] = {\r\n      total: parsedData.length,\r\n      yearlyData: globalYearlyData,\r\n      fatal: fatalCount,\r\n      nonFatal: nonFatalCount,\r\n      unknown: unknownCount\r\n    };\r\n    \r\n    setCountryCounts(counts);\r\n    \r\n    // -----------------------------\r\n    // prepare top country data for country pie chart\r\n    // -----------------------------\r\n    const allCountriesData = Object.entries(counts)\r\n      .filter(([country]) => country !== \"GLOBAL\")\r\n      .map(([country, data]) => ({ name: country, value: data.total }))\r\n      .sort((a, b) => b.value - a.value);\r\n    \r\n    const totalAttacks = parsedData.length;\r\n    // filter for countries with at least 5% of attacks\r\n    const significantCountries = allCountriesData.filter(\r\n      country => (country.value / totalAttacks) * 100 >= 5\r\n    );\r\n    // sum the values of countries with less than 5% for \"Others\" category\r\n    const otherCountriesSum = allCountriesData\r\n      .filter(country => (country.value / totalAttacks) * 100 < 5)\r\n      .reduce((sum, item) => sum + item.value, 0);\r\n\r\n    const finalCountryData = [...significantCountries];\r\n    // add \"Others\" category if there are countries with less than 5%\r\n    if (otherCountriesSum > 0) {\r\n      finalCountryData.push({ \r\n        name: \"OTHERS\", \r\n        value: otherCountriesSum\r\n      });\r\n    }\r\n    \r\n    setCountryData(finalCountryData);\r\n    \r\n    // -----------------------------\r\n    // find the top region and its percentage\r\n    // -----------------------------\r\n    if (allCountriesData.length > 0) {\r\n      const topRegion = allCountriesData[0];\r\n      const topRegPercent = ((topRegion.value / parsedData.length) * 100).toFixed(1);\r\n      setTopRegionPercentage(topRegPercent);\r\n      setTopRegionName(topRegion.name);\r\n    }\r\n    \r\n    // -----------------------------\r\n    // sort countries by selected order\r\n    // -----------------------------\r\n    let countries = Object.keys(counts).filter(Boolean);\r\n    countries = sortOrder === 'alphabetical' \r\n      ? countries.sort() \r\n      : countries.sort((a, b) => counts[b].total - counts[a].total);\r\n    \r\n    setAllCountries(countries);\r\n    \r\n  }, [dateRange, sortOrder]);\r\n  \r\n  return (\r\n    <div className=\"summary-visualization-container\">\r\n      {/* date range picker at the top */}\r\n      <DateRangePicker \r\n        dateRange={dateRange}\r\n        onDateRangeChange={setDateRange}\r\n        className=\"top-date-range-controls\"\r\n      />\r\n      \r\n      {/* -----------------------------\r\n          summary statistics and pie charts\r\n          ----------------------------- */}\r\n      <div className=\"summary-boxes\">\r\n        <SummaryBoxes \r\n          totalReports={totalReports}\r\n          dateRange={dateRange}\r\n        />\r\n\r\n        <CountryPieChart \r\n          countryData={countryData}\r\n          topRegionName={topRegionName}\r\n          topRegionPercentage={topRegionPercentage}\r\n        />\r\n        \r\n        <FatalityPieChart \r\n          fatalData={fatalData}\r\n          fatalPercentage={fatalPercentage}\r\n        />\r\n      </div>\r\n      \r\n      {/* -----------------------------\r\n          countries selection for time series chart\r\n          ----------------------------- */}\r\n      <RegionSelector \r\n        title=\"Display Locations\"\r\n        regions={allCountries}\r\n        selectedRegions={selectedCountries}\r\n        onSelectionChange={setSelectedCountries}\r\n        sortOrder={sortOrder}\r\n        onSortOrderChange={setSortOrder}\r\n        regionCounts={countryCounts}\r\n        className=\"countries-selection-bar\"\r\n      />\r\n      \r\n      {/* -----------------------------\r\n          time series chart\r\n          ----------------------------- */}\r\n      <TimeSeriesChart \r\n        dateRange={dateRange}\r\n        selectedCountries={selectedCountries}\r\n        countryCounts={countryCounts}\r\n      />\r\n    </div>\r\n  );\r\n}","// src/components/CountryBar/BarChart.js\r\nimport React from 'react';\r\nimport { useD3Chart } from '../../hooks/useD3Chart';\r\nimport * as d3 from 'd3';\r\nimport sharkData from '../../data/clean_shark_attacks_data.json';\r\n\r\nexport function BarChart({ dateRange, currentYear, displayMode, customCountries }) {\r\n  const svgRef = useD3Chart((svg) => {\r\n    // -----------------------------\r\n    // data preparation\r\n    // -----------------------------\r\n    // convert dates to javascript date objects\r\n    const parsedData = sharkData.map(d => ({\r\n      ...d,\r\n      Date: d.Date ? new Date(d.Date) : null\r\n    }));\r\n\r\n    // filter data by the selected time range and date range\r\n    const filteredData = parsedData.filter(d => {\r\n      if (!d.Date) return false;\r\n      \r\n      const attackYear = d.Date.getFullYear();\r\n      \r\n      // only include data within the date range and up to current year\r\n      return attackYear >= dateRange.start && \r\n             attackYear <= dateRange.end && \r\n             attackYear <= currentYear;\r\n    });\r\n\r\n    // -----------------------------\r\n    // data aggregation by country and fatality\r\n    // -----------------------------\r\n    const countByCountryAndFatality = {};\r\n    \r\n    filteredData.forEach(d => {\r\n      if (!d.Country) return;\r\n      \r\n      // initialize country data if it doesn't exist\r\n      if (!countByCountryAndFatality[d.Country]) {\r\n        countByCountryAndFatality[d.Country] = {\r\n          fatal: 0,\r\n          nonFatal: 0,\r\n          unknown: 0,\r\n          total: 0\r\n        };\r\n      }\r\n      \r\n      // categorize by fatality status\r\n      if (d.Fatal === true) {\r\n        countByCountryAndFatality[d.Country].fatal += 1;\r\n      } else if (d.Fatal === false) {\r\n        countByCountryAndFatality[d.Country].nonFatal += 1;\r\n      } else {\r\n        countByCountryAndFatality[d.Country].unknown += 1;\r\n      }\r\n      \r\n      countByCountryAndFatality[d.Country].total += 1;\r\n    });\r\n\r\n    // convert to array and sort by total attacks\r\n    let countryCounts = Object.entries(countByCountryAndFatality)\r\n      .map(([country, counts]) => ({ \r\n        country, \r\n        fatal: counts.fatal,\r\n        nonFatal: counts.nonFatal,\r\n        unknown: counts.unknown,\r\n        total: counts.total\r\n      }))\r\n      .sort((a, b) => b.total - a.total);\r\n    \r\n    // -----------------------------\r\n    // apply display mode filter\r\n    // -----------------------------\r\n    if (displayMode === 'top5') {\r\n      countryCounts = countryCounts.slice(0, 5);\r\n    } else if (displayMode === 'top10') {\r\n      countryCounts = countryCounts.slice(0, 10);\r\n    } else if (displayMode === 'top15') {\r\n      countryCounts = countryCounts.slice(0, 15);\r\n    } else if (displayMode === 'custom') {\r\n      // only show countries if they're selected\r\n      if (customCountries.length > 0) {\r\n        countryCounts = countryCounts.filter(d => customCountries.includes(d.country));\r\n      } else {\r\n        // if no countries selected in custom mode, show empty chart\r\n        countryCounts = [];\r\n      }\r\n    }\r\n\r\n    // -----------------------------\r\n    // chart setup\r\n    // -----------------------------\r\n    const margin = { top: 20, right: 180, bottom: 50, left: 180 };\r\n    const width = 800 - margin.left - margin.right;\r\n    const height = 500 - margin.top - margin.bottom;\r\n\r\n    // configure svg\r\n    svg.attr(\"width\", width + margin.left + margin.right)\r\n       .attr(\"height\", height + margin.top + margin.bottom)\r\n       .append(\"g\")\r\n       .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n    // calculate max count for dynamic scaling, with some padding\r\n    const maxCount = d3.max(countryCounts, d => d.total) || 0;\r\n    const xMax = Math.max(Math.ceil(maxCount * 1.1), 10); // at least 10 for empty/low data\r\n    \r\n    // round to a nice value (next multiple of 50)\r\n    const roundedMax = Math.ceil(xMax / 50) * 50;\r\n\r\n    // -----------------------------\r\n    // create scales\r\n    // -----------------------------\r\n    const x = d3.scaleLinear()\r\n      .domain([0, roundedMax])\r\n      .range([0, width]);\r\n\r\n    const y = d3.scaleBand()\r\n      .domain(countryCounts.map(d => d.country))\r\n      .range([0, height])\r\n      .padding(0.2);\r\n\r\n    // determine tick intervals based on max value\r\n    let tickValues = [];\r\n    if (roundedMax <= 50) {\r\n      // for smaller values, use 10 as interval\r\n      tickValues = d3.range(0, roundedMax + 1, 10);\r\n    } else if (roundedMax <= 600){\r\n      // between 50 and 600, use 50 as interval\r\n      tickValues = d3.range(0, roundedMax + 1, 50);\r\n    } else if (roundedMax <= 1600) {\r\n      // between 600 and 1600, use 200 as interval\r\n      tickValues = d3.range(0, roundedMax + 1, 200);\r\n    } else {\r\n      // above 1600, use 400 as interval\r\n      tickValues = d3.range(0, roundedMax + 1, 400);\r\n    }\r\n\r\n    // -----------------------------\r\n    // add axes\r\n    // -----------------------------\r\n    // add x axis with appropriate ticks\r\n    svg.select(\"g\").append(\"g\")\r\n      .attr(\"transform\", `translate(0,${height})`)\r\n      .call(d3.axisBottom(x)\r\n        .tickValues(tickValues)\r\n      )\r\n      .selectAll(\"text\")\r\n      .style(\"text-anchor\", \"end\")\r\n      .style(\"font-size\", \"14px\");\r\n\r\n    // add x axis label\r\n    svg.select(\"g\").append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"x\", width / 2)\r\n      .attr(\"y\", height + margin.bottom - 10)\r\n      .text(\"Number of Shark Attacks\")\r\n      .style(\"font-size\", \"16px\");\r\n\r\n    // add y axis with text wrapping\r\n    const yAxis = svg.select(\"g\").append(\"g\")\r\n      .call(d3.axisLeft(y));\r\n      \r\n    // apply text wrapping to y-axis labels\r\n    yAxis.selectAll(\".tick text\")\r\n      .style(\"font-size\", \"14px\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .call(wrapText, margin.left - 10);\r\n\r\n    // -----------------------------\r\n    // add grid lines\r\n    // -----------------------------\r\n    svg.select(\"g\").append(\"g\")\r\n      .attr(\"class\", \"grid\")\r\n      .selectAll(\"line\")\r\n      .data(d3.range(0, roundedMax + 1, 50))\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"x1\", d => x(d))\r\n      .attr(\"y1\", 0)\r\n      .attr(\"x2\", d => x(d))\r\n      .attr(\"y2\", height)\r\n      .attr(\"stroke\", \"#e0e0e0\")\r\n      .attr(\"stroke-width\", 1);\r\n\r\n    // -----------------------------\r\n    // define colors and create tooltip\r\n    // -----------------------------\r\n    // define colors for different fatality status\r\n    const colors = {\r\n      unknown: \"#b3b3b3\",   // gray\r\n      nonFatal: \"#4e79a7\",  // blue, changed from #6baed6\r\n      fatal: \"#e41a1c\"      // red\r\n    };\r\n\r\n    // create tooltip\r\n    const tooltip = d3.select(\"body\").select(\".summary-tooltip\");\r\n    if (!tooltip.size()) {\r\n      d3.select(\"body\").append(\"div\")\r\n        .attr(\"class\", \"summary-tooltip\")\r\n        .style(\"opacity\", 0)\r\n        .style(\"position\", \"absolute\")\r\n        .style(\"background-color\", \"white\")\r\n        .style(\"border\", \"1px solid #ddd\")\r\n        .style(\"border-radius\", \"4px\")\r\n        .style(\"padding\", \"10px\")\r\n        .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.1)\")\r\n        .style(\"font-size\", \"14px\")\r\n        .style(\"pointer-events\", \"none\")\r\n        .style(\"z-index\", 100);\r\n    }\r\n\r\n    // -----------------------------\r\n    // create stacked bar charts\r\n    // -----------------------------\r\n    // create a group for each country's stacked bar\r\n    svg.select(\"g\").selectAll(\".bar-group\")\r\n      .data(countryCounts)\r\n      .enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", \"bar-group\")\r\n      .attr(\"transform\", d => `translate(0,${y(d.country)})`)\r\n      .on(\"mouseover\", function(event, d) {\r\n        // format percentages\r\n        const fatalPercent = (d.fatal / d.total * 100).toFixed(1);\r\n        const nonFatalPercent = (d.nonFatal / d.total * 100).toFixed(1);\r\n        const unknownPercent = (d.unknown / d.total * 100).toFixed(1);\r\n        \r\n        // build tooltip content\r\n        let tooltipContent = `<strong>${d.country}</strong><br/><br/>`;\r\n        \r\n        tooltipContent += `<div style=\"display: flex; align-items: center; margin-bottom: 5px;\">\r\n          <div style=\"width: 12px; height: 12px; background-color: ${colors.fatal}; margin-right: 5px;\"></div>\r\n          <span>Fatal: ${d.fatal} (${fatalPercent}%)</span>\r\n        </div>`;\r\n        \r\n        tooltipContent += `<div style=\"display: flex; align-items: center; margin-bottom: 5px;\">\r\n          <div style=\"width: 12px; height: 12px; background-color: ${colors.nonFatal}; margin-right: 5px;\"></div>\r\n          <span>Non-Fatal: ${d.nonFatal} (${nonFatalPercent}%)</span>\r\n        </div>`;\r\n        \r\n        tooltipContent += `<div style=\"display: flex; align-items: center;\">\r\n          <div style=\"width: 12px; height: 12px; background-color: ${colors.unknown}; margin-right: 5px;\"></div>\r\n          <span>Unknown: ${d.unknown} (${unknownPercent}%)</span>\r\n        </div>`;\r\n        \r\n        // show tooltip\r\n        d3.select(\".summary-tooltip\")\r\n          .html(tooltipContent)\r\n          .style(\"left\", (event.pageX + 15) + \"px\")\r\n          .style(\"top\", (event.pageY - 28) + \"px\")\r\n          .style(\"opacity\", 0.95);\r\n      })\r\n      .on(\"mouseout\", function() {\r\n        d3.select(\".summary-tooltip\").style(\"opacity\", 0);\r\n      });\r\n    \r\n    // add the stacked bar segments to each group\r\n    countryCounts.forEach(d => {\r\n      const y0 = y(d.country);\r\n      const height = y.bandwidth();\r\n      \r\n      // create a parent group for the entire bar\r\n      const barGroup = svg.select(\"g\").select(`g[transform=\"translate(0,${y0})\"]`);\r\n      \r\n      // add an invisible overlay for the entire bar for better tooltip interaction\r\n      barGroup.append(\"rect\")\r\n        .attr(\"class\", \"bar-overlay\")\r\n        .attr(\"y\", 0)\r\n        .attr(\"height\", height)\r\n        .attr(\"x\", 0)\r\n        .attr(\"width\", x(d.total))\r\n        .attr(\"fill\", \"transparent\"); // invisible but captures mouse events\r\n      \r\n      // unknown cases (left)\r\n      if (d.unknown > 0) {\r\n        barGroup.append(\"rect\")\r\n          .attr(\"class\", \"bar-unknown\")\r\n          .attr(\"y\", 0)\r\n          .attr(\"height\", height)\r\n          .attr(\"x\", 0)\r\n          .attr(\"width\", x(d.unknown))\r\n          .attr(\"fill\", colors.unknown);\r\n      }\r\n      \r\n      // non-fatal cases (middle)\r\n      if (d.nonFatal > 0) {\r\n        barGroup.append(\"rect\")\r\n          .attr(\"class\", \"bar-non-fatal\")\r\n          .attr(\"y\", 0)\r\n          .attr(\"height\", height)\r\n          .attr(\"x\", x(d.unknown))\r\n          .attr(\"width\", x(d.nonFatal))\r\n          .attr(\"fill\", colors.nonFatal);\r\n      }\r\n      \r\n      // fatal cases (right)\r\n      if (d.fatal > 0) {\r\n        barGroup.append(\"rect\")\r\n          .attr(\"class\", \"bar-fatal\")\r\n          .attr(\"y\", 0)\r\n          .attr(\"height\", height)\r\n          .attr(\"x\", x(d.unknown + d.nonFatal))\r\n          .attr(\"width\", x(d.fatal))\r\n          .attr(\"fill\", colors.fatal);\r\n      }\r\n    });\r\n\r\n    // -----------------------------\r\n    // add labels and legend\r\n    // -----------------------------\r\n    // add count labels at the end of each bar\r\n    svg.select(\"g\").selectAll(\".label\")\r\n      .data(countryCounts)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"class\", \"label\")\r\n      .attr(\"x\", d => x(d.total) + 5)\r\n      .attr(\"y\", d => y(d.country) + y.bandwidth() / 2)\r\n      .attr(\"dy\", \".35em\")\r\n      .text(d => d.total)\r\n      .style(\"font-size\", \"14px\");\r\n\r\n    // add legend\r\n    const legendX = width + 20;\r\n    const legendY = 20;\r\n    const legendSpacing = 25;\r\n    \r\n    // legend title\r\n    svg.select(\"g\").append(\"text\")\r\n      .attr(\"x\", legendX)\r\n      .attr(\"y\", legendY - 10)\r\n      .attr(\"font-weight\", \"bold\")\r\n      .text(\"Fatality Status\");\r\n    \r\n    // fatal legend\r\n    svg.select(\"g\").append(\"rect\")\r\n      .attr(\"x\", legendX)\r\n      .attr(\"y\", legendY)\r\n      .attr(\"width\", 18)\r\n      .attr(\"height\", 18)\r\n      .attr(\"fill\", colors.fatal);\r\n    \r\n    svg.select(\"g\").append(\"text\")\r\n      .attr(\"x\", legendX + 25)\r\n      .attr(\"y\", legendY + 9)\r\n      .attr(\"dy\", \".35em\")\r\n      .text(\"FATAL\");\r\n    \r\n    // non-fatal legend\r\n    svg.select(\"g\").append(\"rect\")\r\n      .attr(\"x\", legendX)\r\n      .attr(\"y\", legendY + legendSpacing)\r\n      .attr(\"width\", 18)\r\n      .attr(\"height\", 18)\r\n      .attr(\"fill\", colors.nonFatal);\r\n    \r\n    svg.select(\"g\").append(\"text\")\r\n      .attr(\"x\", legendX + 25)\r\n      .attr(\"y\", legendY + legendSpacing + 9)\r\n      .attr(\"dy\", \".35em\")\r\n      .text(\"NON-FATAL\");\r\n    \r\n    // unknown legend\r\n    svg.select(\"g\").append(\"rect\")\r\n      .attr(\"x\", legendX)\r\n      .attr(\"y\", legendY + legendSpacing * 2)\r\n      .attr(\"width\", 18)\r\n      .attr(\"height\", 18)\r\n      .attr(\"fill\", colors.unknown);\r\n    \r\n    svg.select(\"g\").append(\"text\")\r\n      .attr(\"x\", legendX + 25)\r\n      .attr(\"y\", legendY + legendSpacing * 2 + 9)\r\n      .attr(\"dy\", \".35em\")\r\n      .text(\"UNKNOWN\");\r\n\r\n    // if no data in custom mode, show a message\r\n    if (displayMode === 'custom' && customCountries.length === 0) {\r\n      svg.select(\"g\").append(\"text\")\r\n        .attr(\"x\", width / 2)\r\n        .attr(\"y\", height / 2)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .style(\"font-size\", \"16px\")\r\n        .style(\"fill\", \"#666\")\r\n        .text(\"Please select one or more locations to display\");\r\n    }\r\n    \r\n    // -----------------------------\r\n    // helper functions\r\n    // -----------------------------\r\n    // helper function to wrap text\r\n    function wrapText(text, width) {\r\n      text.each(function() {\r\n        const text = d3.select(this);\r\n        const words = text.text().split(/\\s+/).reverse();\r\n        const lineHeight = 1.1; // ems\r\n        const y = text.attr(\"y\");\r\n        const dy = parseFloat(text.attr(\"dy\") || 0);\r\n        \r\n        let word;\r\n        let line = [];\r\n        let lineNumber = 0;\r\n        let tspan = text.text(null).append(\"tspan\").attr(\"x\", -10).attr(\"y\", y).attr(\"dy\", dy + \"em\");\r\n        \r\n        while ((word = words.pop())) {\r\n          line.push(word);\r\n          tspan.text(line.join(\" \"));\r\n          if (tspan.node().getComputedTextLength() > width) {\r\n            line.pop();\r\n            tspan.text(line.join(\" \"));\r\n            line = [word];\r\n            tspan = text.append(\"tspan\").attr(\"x\", -10).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [dateRange, currentYear, displayMode, customCountries]);\r\n\r\n  return <svg ref={svgRef}></svg>;\r\n}","// src/components/CountryBar/YearSlider.js\r\nimport React from 'react';\r\n\r\nexport function YearSlider({ dateRange, currentYear, onYearChange }) {\r\n  // handle the year slider change\r\n  const handleYearChange = (e) => {\r\n    onYearChange(parseInt(e.target.value));\r\n  };\r\n  \r\n  return (\r\n    <div className=\"time-controls\">\r\n      <div className=\"slider-container\">\r\n        {/* year display and step buttons */}\r\n        <div className=\"time-display\">\r\n          <span className=\"time-label\">Year: {currentYear}</span>\r\n          <div className=\"step-buttons\">\r\n            {/* previous year button */}\r\n            <button \r\n              onClick={() => onYearChange(Math.max(dateRange.start, currentYear - 1))} \r\n              className=\"step-button\"\r\n            >\r\n              &lt;\r\n            </button>\r\n            {/* next year button */}\r\n            <button \r\n              onClick={() => onYearChange(Math.min(dateRange.end, currentYear + 1))} \r\n              className=\"step-button\"\r\n            >\r\n              &gt;\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* year slider input */}\r\n        <input\r\n          type=\"range\"\r\n          min={dateRange.start}\r\n          max={dateRange.end}\r\n          value={currentYear}\r\n          onChange={handleYearChange}\r\n          className=\"slider\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}","// src/components/CountryBar/RegionSelector.js\r\nimport React, { useState } from 'react';\r\n\r\nexport function RegionSelector({ \r\n  displayMode, \r\n  onDisplayModeChange, \r\n  customCountries, \r\n  onCustomCountriesChange,\r\n  countriesInRange,\r\n  countryCounts,\r\n  sortOrder,\r\n  onSortOrderChange\r\n}) {\r\n  // search term for filtering countries\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  \r\n  // -----------------------------\r\n  // event handlers\r\n  // -----------------------------\r\n  // toggle a country selection in custom mode\r\n  const toggleCountry = (country) => {\r\n    if (customCountries.includes(country)) {\r\n      onCustomCountriesChange(customCountries.filter(c => c !== country));\r\n    } else if (customCountries.length < 10) {\r\n      onCustomCountriesChange([...customCountries, country]);\r\n    }\r\n  };\r\n  \r\n  // filter countries for display in the selection list, applying the search filter\r\n  const filteredCountries = countriesInRange\r\n    .filter(country => country.toLowerCase().includes(searchTerm.toLowerCase()));\r\n  \r\n  return (\r\n    <div className=\"option-group\">\r\n      <h4>Locations</h4>\r\n      \r\n      {/* -----------------------------\r\n          display mode radio buttons\r\n          ----------------------------- */}\r\n      <div className=\"radio-options\">\r\n        <div className=\"radio-option\">\r\n          <input\r\n            type=\"radio\"\r\n            id=\"top5\"\r\n            name=\"displayMode\"\r\n            value=\"top5\"\r\n            checked={displayMode === 'top5'}\r\n            onChange={() => onDisplayModeChange('top5')}\r\n          />\r\n          <label htmlFor=\"top5\">Top 5</label>\r\n        </div>\r\n        <div className=\"radio-option\">\r\n          <input\r\n            type=\"radio\"\r\n            id=\"top10\"\r\n            name=\"displayMode\"\r\n            value=\"top10\"\r\n            checked={displayMode === 'top10'}\r\n            onChange={() => onDisplayModeChange('top10')}\r\n          />\r\n          <label htmlFor=\"top10\">Top 10</label>\r\n        </div>\r\n        <div className=\"radio-option\">\r\n          <input\r\n            type=\"radio\"\r\n            id=\"top15\"\r\n            name=\"displayMode\"\r\n            value=\"top15\"\r\n            checked={displayMode === 'top15'}\r\n            onChange={() => onDisplayModeChange('top15')}\r\n          />\r\n          <label htmlFor=\"top15\">Top 15</label>\r\n        </div>\r\n        <div className=\"radio-option\">\r\n          <input\r\n            type=\"radio\"\r\n            id=\"custom\"\r\n            name=\"displayMode\"\r\n            value=\"custom\"\r\n            checked={displayMode === 'custom'}\r\n            onChange={() => onDisplayModeChange('custom')}\r\n          />\r\n          <label htmlFor=\"custom\">Custom</label>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* -----------------------------\r\n          custom country selection UI, only shown in custom mode\r\n          ----------------------------- */}\r\n      {displayMode === 'custom' && (\r\n        <div className=\"custom-selection\">\r\n          <div className=\"selection-header\">\r\n            <div className=\"selection-count\">\r\n              {customCountries.length} selected (max 10)\r\n            </div>\r\n            {customCountries.length > 0 && (\r\n              <button \r\n                className=\"deselect-all-button\" \r\n                onClick={() => onCustomCountriesChange([])}\r\n                title=\"Deselect all countries\"\r\n              >\r\n                ✕\r\n              </button>\r\n            )}\r\n          </div>\r\n          \r\n          {/* sort button */}\r\n          <button \r\n            onClick={() => onSortOrderChange(sortOrder === 'alphabetical' ? 'count' : 'alphabetical')}\r\n            className=\"sort-button\"\r\n          >\r\n            Sort by: {sortOrder === 'alphabetical' ? 'Alphabetical' : 'Attack Count'}\r\n          </button>\r\n          \r\n          {/* search input */}\r\n          <div className=\"search-input\">\r\n            <input \r\n              type=\"text\" \r\n              placeholder=\"Search locations...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n            />\r\n          </div>\r\n          \r\n          {/* country list */}\r\n          <div className=\"countries-container\">\r\n            {filteredCountries.length > 0 ? (\r\n              filteredCountries.map(country => (\r\n                <div \r\n                  key={country} \r\n                  className={`country-item ${customCountries.includes(country) ? 'selected' : ''}`}\r\n                  onClick={() => toggleCountry(country)}\r\n                >\r\n                  <div className=\"country-name\">\r\n                    {customCountries.includes(country) && (\r\n                      <span className=\"checkmark\">✓</span>\r\n                    )}\r\n                    <span>{country}</span>\r\n                  </div>\r\n                  <span className=\"country-count\">{countryCounts[country] || 0}</span>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <div className=\"no-results\">No matching countries found</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}","// src/components/CountryBar/index.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSessionStorage } from '../../hooks/useSessionStorage';\r\nimport { DateRangePicker } from '../shared/DateRangePicker';\r\nimport { BarChart } from './BarChart';\r\nimport { YearSlider } from './YearSlider';\r\nimport { RegionSelector } from './RegionSelector';\r\nimport sharkData from '../../data/clean_shark_attacks_data.json';\r\n\r\nexport function CountryBarChart() {\r\n  // -----------------------------\r\n  // state management\r\n  // -----------------------------\r\n  // date range for filtering data\r\n  const [dateRange, setDateRange] = useSessionStorage(\r\n    'countryBarDateRange',\r\n    { start: 1900, end: 2023 }\r\n  );\r\n  \r\n  // current year for the time slider\r\n  const [currentYear, setCurrentYear] = useSessionStorage(\r\n    'countryBarCurrentYear',\r\n    1900\r\n  );\r\n  \r\n  // display mode for countries (top5, top10, top15, or custom)\r\n  const [displayMode, setDisplayMode] = useSessionStorage(\r\n    'countryBarDisplayMode',\r\n    'top15'\r\n  );\r\n  \r\n  // selected countries when in custom mode\r\n  const [customCountries, setCustomCountries] = useSessionStorage(\r\n    'countryBarCustomCountries',\r\n    []\r\n  );\r\n  \r\n  // all available countries from the dataset\r\n  const [, setAllCountries] = useState([]);\r\n  \r\n  // countries that have data within the selected date range\r\n  const [countriesInRange, setCountriesInRange] = useState([]);\r\n  \r\n  // sorting method for country display (alphabetical or by count)\r\n  const [sortOrder, setSortOrder] = useSessionStorage(\r\n    'countryBarSortOrder',\r\n    'count'\r\n  );\r\n  \r\n  // object containing count of attacks by country\r\n  const [countryCounts, setCountryCounts] = useState({});\r\n  \r\n  // -----------------------------\r\n  // process data when date range changes\r\n  // -----------------------------\r\n  useEffect(() => {\r\n    // convert dates to javascript date objects\r\n    const parsedData = sharkData.map(d => ({\r\n      ...d,\r\n      Date: d.Date ? new Date(d.Date) : null\r\n    }));\r\n\r\n    // get all countries from the dataset\r\n    const countries = [...new Set(sharkData.map(d => d.Country))]\r\n      .filter(Boolean)\r\n      .sort();\r\n    \r\n    setAllCountries(countries);\r\n    \r\n    // filter data to only include attacks within the selected date range\r\n    const dataInRange = parsedData.filter(d => {\r\n      if (!d.Date) return false;\r\n      const attackYear = d.Date.getFullYear();\r\n      return attackYear >= dateRange.start && attackYear <= dateRange.end;\r\n    });\r\n    \r\n    // count attacks by country for sorting purposes\r\n    const countryCounts = {};\r\n    dataInRange.forEach(d => {\r\n      if (!d.Country) return;\r\n      countryCounts[d.Country] = (countryCounts[d.Country] || 0) + 1;\r\n    });\r\n    \r\n    setCountryCounts(countryCounts);\r\n    \r\n    // get countries that have data in the selected date range\r\n    let countriesWithData = [...new Set(dataInRange.map(d => d.Country))]\r\n      .filter(Boolean);\r\n    \r\n    // sort based on user selection\r\n    if (sortOrder === 'count') {\r\n      countriesWithData = countriesWithData.sort((a, b) => \r\n        (countryCounts[b] || 0) - (countryCounts[a] || 0)\r\n      );\r\n    } else {\r\n      countriesWithData = countriesWithData.sort();\r\n    }\r\n    \r\n    setCountriesInRange(countriesWithData);\r\n    \r\n    // reset custom countries if they're not in the new range\r\n    setCustomCountries(prev => prev.filter(c => countriesWithData.includes(c)));\r\n    \r\n    // reset the year to the start of the range if it's outside the new range\r\n    if (currentYear < dateRange.start || currentYear > dateRange.end) {\r\n      setCurrentYear(dateRange.start);\r\n    }\r\n    \r\n  }, [dateRange, sortOrder, currentYear, setCurrentYear, setCustomCountries]);\r\n\r\n  return (\r\n    <div className=\"visualization-container\">\r\n      {/* -----------------------------\r\n          main chart area\r\n          ----------------------------- */}\r\n      <div className=\"chart-container\">\r\n        <h2>Cummulative Attacks by Location with Fatality Breakdown ({dateRange.start} - {currentYear})</h2>\r\n        {/*<h2>Attacks by Location with Fatality Breakdown ({dateRange.start} - {dateRange.end}, through {currentYear})</h2> */}\r\n        {/* bar chart showing attack counts by country */}\r\n        <BarChart \r\n          dateRange={dateRange}\r\n          currentYear={currentYear}\r\n          displayMode={displayMode}\r\n          customCountries={customCountries}\r\n        />\r\n        \r\n        {/* year slider for time navigation */}\r\n        <YearSlider \r\n          dateRange={dateRange}\r\n          currentYear={currentYear}\r\n          onYearChange={setCurrentYear}\r\n        />\r\n      </div>\r\n      \r\n      {/* -----------------------------\r\n          chart options sidebar\r\n          ----------------------------- */}\r\n      <div className=\"sidebar\">\r\n        <div className=\"options-section\">\r\n          <h3>Chart Options</h3>\r\n          \r\n          {/* date range selector */}\r\n          <DateRangePicker \r\n            dateRange={dateRange}\r\n            onDateRangeChange={setDateRange}\r\n          />\r\n          \r\n          {/* region/country selector */}\r\n          <RegionSelector \r\n            displayMode={displayMode}\r\n            onDisplayModeChange={setDisplayMode}\r\n            customCountries={customCountries}\r\n            onCustomCountriesChange={setCustomCountries}\r\n            countriesInRange={countriesInRange}\r\n            countryCounts={countryCounts}\r\n            sortOrder={sortOrder}\r\n            onSortOrderChange={setSortOrder}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","// src/components/MonthlyRadar/RadarChart.js\r\nimport React from 'react';\r\nimport { useD3Chart } from '../../hooks/useD3Chart';\r\nimport * as d3 from 'd3';\r\nimport sharkData from '../../data/clean_shark_attacks_data.json';\r\n\r\nexport function RadarChart({ \r\n  dateRange, \r\n  selectedRegions, \r\n  zoom, \r\n  chartPosition, \r\n  chartPositionRef,\r\n  setChartPosition, \r\n  activeRegions \r\n}) {\r\n  // -----------------------------\r\n  // colors for the regions\r\n  // -----------------------------\r\n  const regionColors = [\r\n    { fill: \"var(--region-color-0)\", stroke: \"#2a5a8a\" }, // blue\r\n    { fill: \"var(--region-color-1)\", stroke: \"#ff7f40\" }, // orange\r\n    { fill: \"var(--region-color-2)\", stroke: \"#556b2f\" }  // green\r\n  ];\r\n  \r\n  const svgRef = useD3Chart((svg) => {\r\n    // -----------------------------\r\n    // chart setup\r\n    // -----------------------------\r\n    const width = 600;\r\n    const height = 600;\r\n    const margin = { top: 70, right: 70, bottom: 70, left: 70 };\r\n    const radius = Math.min(width - margin.left - margin.right, height - margin.top - margin.bottom) / 2;\r\n    \r\n    // configure svg\r\n    svg.attr(\"width\", width)\r\n       .attr(\"height\", height)\r\n       .attr(\"viewBox\", `0 0 ${width} ${height}`)\r\n       .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\r\n       .style(\"cursor\", \"grab\");\r\n    \r\n    // add title at the top\r\n    svg.append(\"text\")\r\n      .attr(\"class\", \"radar-chart-title\")\r\n      .attr(\"x\", width / 2)\r\n      .attr(\"y\", 30)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .style(\"font-size\", \"20px\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .text(`Seasonal Patterns: Monthly Attack Distribution (${dateRange.start}-${dateRange.end})`);\r\n    \r\n    // chart container (fixed position, will contain the chart)\r\n    const chartContainer = svg.append(\"g\")\r\n      .attr(\"class\", \"radar-chart-container\")\r\n      .attr(\"transform\", `translate(${width/2}, ${height/2})`);\r\n    \r\n    // main chart group (will be scaled and dragged)\r\n    const chartGroup = chartContainer.append(\"g\")\r\n      .attr(\"class\", \"radar-chart-group\")\r\n      .attr(\"transform\", `translate(${chartPosition.x}, ${chartPosition.y}) scale(${zoom})`);\r\n    \r\n    // -----------------------------\r\n    // add drag behavior for panning\r\n    // -----------------------------\r\n    const drag = d3.drag()\r\n      .on(\"start\", function() {\r\n        d3.select(this).style(\"cursor\", \"grabbing\");\r\n      })\r\n      .on(\"drag\", function(event) {\r\n        // update the position directly in the ref for smooth updates\r\n        chartPositionRef.current.x += event.dx;\r\n        chartPositionRef.current.y += event.dy;\r\n        \r\n        // apply the transform directly without state update during drag\r\n        chartGroup.attr(\"transform\", \r\n          `translate(${chartPositionRef.current.x}, ${chartPositionRef.current.y}) scale(${zoom})`);\r\n      })\r\n      .on(\"end\", function() {\r\n        // only update state at drag end to avoid re-renders during dragging\r\n        setChartPosition({ \r\n          x: chartPositionRef.current.x, \r\n          y: chartPositionRef.current.y \r\n        });\r\n        d3.select(this).style(\"cursor\", \"grab\");\r\n      });\r\n    \r\n    svg.call(drag);\r\n    \r\n    // store all month data points for later reference\r\n    const allDataPoints = {};\r\n    \r\n    // if no regions selected, show empty chart with instructions\r\n    if (selectedRegions.length === 0) {\r\n      drawEmptyChart(chartGroup, radius);\r\n      return;\r\n    }\r\n    \r\n    // -----------------------------\r\n    // data processing\r\n    // -----------------------------\r\n    // process data for selected regions\r\n    const monthlyData = processDataForChart(selectedRegions);\r\n    const maxValue = getMaxValue(monthlyData);\r\n    \r\n    // draw chart components\r\n    drawGridAndAxes(chartGroup, radius, maxValue);\r\n    drawRadarPaths(chartGroup, monthlyData, radius, maxValue, allDataPoints);\r\n    \r\n    // show values for active regions\r\n    activeRegions.forEach(region => {\r\n      if (allDataPoints[region]) {\r\n        const regionIndex = selectedRegions.indexOf(region);\r\n        if (regionIndex !== -1) {\r\n          showRegionValues(chartGroup, region, allDataPoints[region], \r\n            regionColors[regionIndex % regionColors.length]);\r\n        }\r\n      }\r\n    });\r\n    \r\n    // add tooltip if it doesn't exist\r\n    if (!d3.select(\"body\").select(\".radar-tooltip\").size()) {\r\n      d3.select(\"body\").append(\"div\")\r\n        .attr(\"class\", \"radar-tooltip\")\r\n        .style(\"opacity\", 0)\r\n        .style(\"position\", \"absolute\")\r\n        .style(\"background-color\", \"white\")\r\n        .style(\"border\", \"1px solid #ddd\")\r\n        .style(\"border-radius\", \"4px\")\r\n        .style(\"padding\", \"10px\")\r\n        .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.1)\")\r\n        .style(\"font-size\", \"14px\")\r\n        .style(\"pointer-events\", \"none\")\r\n        .style(\"z-index\", 100);\r\n    }\r\n    \r\n    // -----------------------------\r\n    // helper functions\r\n    // -----------------------------\r\n    // process data for the chart\r\n    function processDataForChart(regions) {\r\n      const monthlyCountsByRegion = {};\r\n      \r\n      // initialize with zeros\r\n      regions.forEach(region => {\r\n        monthlyCountsByRegion[region] = Array(12).fill(0);\r\n      });\r\n      \r\n      // parse dates and filter by date range\r\n      const parsedData = sharkData\r\n        .map(d => ({\r\n          ...d,\r\n          Date: d.Date ? new Date(d.Date) : null\r\n        }))\r\n        .filter(d => {\r\n          if (!d.Date) return false;\r\n          const attackYear = d.Date.getFullYear();\r\n          return attackYear >= dateRange.start && attackYear <= dateRange.end;\r\n        });\r\n      \r\n      // count attacks by month for each selected region\r\n      parsedData.forEach(d => {\r\n        if (!d.Date) return;\r\n        \r\n        const month = d.Date.getMonth();\r\n        \r\n        // for country-specific data\r\n        if (d.Country && regions.includes(d.Country)) {\r\n          monthlyCountsByRegion[d.Country][month]++;\r\n        }\r\n        \r\n        // if GLOBAL is selected, count all attacks by month\r\n        if (regions.includes(\"GLOBAL\")) {\r\n          monthlyCountsByRegion[\"GLOBAL\"][month]++;\r\n        }\r\n      });\r\n      \r\n      return monthlyCountsByRegion;\r\n    }\r\n    \r\n    // get maximum value for scaling\r\n    function getMaxValue(monthlyData) {\r\n      let maxCount = 1;\r\n      Object.values(monthlyData).forEach(monthValues => {\r\n        const regionMax = Math.max(...monthValues);\r\n        if (regionMax > maxCount) maxCount = regionMax;\r\n      });\r\n      \r\n      // round up to next multiple of 5 or appropriate scale\r\n      if (maxCount <= 10) return Math.ceil(maxCount / 2) * 2;\r\n      if (maxCount <= 50) return Math.ceil(maxCount / 5) * 5;\r\n      return Math.ceil(maxCount / 10) * 10;\r\n    }\r\n    \r\n    // draw grid and axis lines\r\n    function drawGridAndAxes(chartGroup, radius, maxValue) {\r\n      const months = [\r\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n      ];\r\n      \r\n      const angleSlice = (Math.PI * 2) / months.length;\r\n      \r\n      // scale for radius\r\n      const rScale = d3.scaleLinear()\r\n        .range([0, radius])\r\n        .domain([0, maxValue]);\r\n      \r\n      // draw concentric grid circles\r\n      const gridGroup = chartGroup.append(\"g\").attr(\"class\", \"radar-grid\");\r\n      \r\n      // determine grid step based on max value\r\n      const gridStep = maxValue <= 10 ? 2 :\r\n                       maxValue <= 30 ? 5 : \r\n                       maxValue <= 60 ? 10 : \r\n                       maxValue <= 100 ? 20 : 50;\r\n      \r\n      for (let i = gridStep; i <= maxValue; i += gridStep) {\r\n        gridGroup.append(\"circle\")\r\n          .attr(\"r\", rScale(i))\r\n          .style(\"fill\", \"none\")\r\n          .style(\"stroke\", \"#ccc\")\r\n          .style(\"stroke-dasharray\", \"4 4\");\r\n        \r\n        gridGroup.append(\"text\")\r\n          .attr(\"x\", 5)\r\n          .attr(\"y\", -rScale(i))\r\n          .attr(\"dy\", \"0.35em\")\r\n          .style(\"font-size\", \"10px\")\r\n          .style(\"fill\", \"#666\")\r\n          .text(i);\r\n      }\r\n      \r\n      // draw axes (one for each month)\r\n      const axes = gridGroup.selectAll(\".radar-axis\")\r\n        .data(months)\r\n        .enter()\r\n        .append(\"g\")\r\n        .attr(\"class\", \"radar-axis\");\r\n      \r\n      // draw axis lines\r\n      axes.append(\"line\")\r\n        .attr(\"x1\", 0)\r\n        .attr(\"y1\", 0)\r\n        .attr(\"x2\", (d, i) => radius * Math.cos(angleSlice * i - Math.PI/2))\r\n        .attr(\"y2\", (d, i) => radius * Math.sin(angleSlice * i - Math.PI/2))\r\n        .style(\"stroke\", \"#ccc\")\r\n        .style(\"stroke-width\", \"1px\");\r\n      \r\n      // add month labels\r\n      axes.append(\"text\")\r\n        .attr(\"class\", \"radar-month-label\")\r\n        .attr(\"text-anchor\", (d, i) => {\r\n          if (i === 0 || i === 6) return \"middle\";\r\n          return (i < 6) ? \"start\" : \"end\";\r\n        })\r\n        .attr(\"x\", (d, i) => {\r\n          const angle = angleSlice * i - Math.PI/2;\r\n          const labelRadius = radius + 15;\r\n          const x = labelRadius * Math.cos(angle);\r\n          return (i > 0 && i < 6) ? x + 5 : (i > 6) ? x - 5 : x;\r\n        })\r\n        .attr(\"y\", (d, i) => {\r\n          const angle = angleSlice * i - Math.PI/2;\r\n          const labelRadius = radius + 15;\r\n          return labelRadius * Math.sin(angle);\r\n        })\r\n        .attr(\"dy\", (d, i) => {\r\n          if (i === 0) return \"-0.7em\"; \r\n          if (i === 6) return \"1em\";  \r\n          return \"0.35em\";\r\n        })\r\n        .text(d => d)\r\n        .style(\"font-size\", \"12px\")\r\n        .style(\"font-weight\", \"bold\");\r\n    }\r\n    \r\n    // draw the radar paths for selected regions\r\n    function drawRadarPaths(chartGroup, monthlyData, radius, maxValue, allDataPoints) {\r\n      const angleSlice = (Math.PI * 2) / 12;\r\n      \r\n      // scale for radius\r\n      const rScale = d3.scaleLinear()\r\n        .range([0, radius])\r\n        .domain([0, maxValue]);\r\n      \r\n      // create line generator for radar\r\n      const radarLine = d3.lineRadial()\r\n        .angle((d, i) => i * angleSlice)\r\n        .radius(d => rScale(d))\r\n        .curve(d3.curveLinearClosed);\r\n      \r\n      // draw each region's path\r\n      Object.entries(monthlyData).forEach(([region, monthValues], i) => {\r\n        const color = regionColors[i % regionColors.length];\r\n        \r\n        // calculate coordinates for data points\r\n        const dataPoints = monthValues.map((value, month) => ({\r\n          region,\r\n          value,\r\n          month,\r\n          x: rScale(value) * Math.cos(angleSlice * month - Math.PI/2),\r\n          y: rScale(value) * Math.sin(angleSlice * month - Math.PI/2),\r\n          angle: angleSlice * month - Math.PI/2\r\n        }));\r\n        \r\n        // store data points for this region\r\n        allDataPoints[region] = dataPoints;\r\n        \r\n        // draw the path\r\n        chartGroup.append(\"path\")\r\n          .datum(monthValues)\r\n          .attr(\"class\", `radar-path-${i}`)\r\n          .attr(\"d\", radarLine)\r\n          .style(\"stroke\", color.stroke)\r\n          .style(\"stroke-width\", \"2px\")\r\n          .style(\"fill\", color.fill)\r\n          .style(\"fill-opacity\", 0.5)\r\n          .style(\"pointer-events\", \"none\");\r\n        \r\n        // add points for non-zero values\r\n        chartGroup.selectAll(`.radar-point-${i}`)\r\n          .data(dataPoints.filter(d => d.value > 0))\r\n          .enter()\r\n          .append(\"circle\")\r\n          .attr(\"class\", `radar-point-${i}`)\r\n          .attr(\"r\", 4)\r\n          .attr(\"cx\", d => d.x)\r\n          .attr(\"cy\", d => d.y)\r\n          .style(\"fill\", color.stroke)\r\n          .style(\"stroke\", \"white\")\r\n          .style(\"stroke-width\", \"1px\")\r\n          .style(\"pointer-events\", \"all\")\r\n          .on(\"mouseover\", function(event, d) {\r\n            const monthNames = [\r\n              \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n              \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n            ];\r\n            \r\n            d3.select(\".radar-tooltip\")\r\n              .style(\"opacity\", 0.9)\r\n              .html(`${region}<br>${monthNames[d.month]}: ${d.value} attacks`)\r\n              .style(\"left\", (event.pageX + 10) + \"px\")\r\n              .style(\"top\", (event.pageY - 28) + \"px\");\r\n          })\r\n          .on(\"mouseout\", function() {\r\n            d3.select(\".radar-tooltip\").style(\"opacity\", 0);\r\n          });\r\n      });\r\n      \r\n      return allDataPoints;\r\n    }\r\n    \r\n    // show values for a specific region\r\n    function showRegionValues(chartGroup, region, dataPoints, color) {\r\n      // add a group for this region's labels\r\n      const labelGroup = chartGroup.append(\"g\")\r\n        .attr(\"class\", `radar-value-labels-${region.replace(/\\s+/g, '-')}`);\r\n        \r\n      // get only non-zero data points\r\n      const nonZeroPoints = dataPoints.filter(d => d.value > 0);\r\n      \r\n      // calculate positions for labels to avoid overlap\r\n      const labelPositions = calculateLabelPositions(nonZeroPoints);\r\n      \r\n      // add value labels\r\n      labelGroup.selectAll(\".radar-value-label\")\r\n        .data(nonZeroPoints)\r\n        .enter()\r\n        .append(\"text\")\r\n        .attr(\"class\", \"radar-value-label\")\r\n        .attr(\"x\", (d, i) => d.x + labelPositions[i].x)\r\n        .attr(\"y\", (d, i) => d.y + labelPositions[i].y)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .style(\"font-size\", \"11px\")\r\n        .style(\"font-weight\", \"bold\")\r\n        .style(\"fill\", color.stroke)\r\n        .text(d => d.value);\r\n    }\r\n    \r\n    // calculate non-overlapping positions for value labels\r\n    function calculateLabelPositions(points) {\r\n      const positions = [];\r\n      const baseDist = 18;\r\n      \r\n      // first pass: assign initial positions based on angle\r\n      for (let i = 0; i < points.length; i++) {\r\n        const angle = points[i].angle;\r\n        positions.push({ \r\n          x: baseDist * Math.cos(angle), \r\n          y: baseDist * Math.sin(angle) \r\n        });\r\n      }\r\n      \r\n      // second pass: adjust for potential overlaps\r\n      for (let i = 0; i < points.length; i++) {\r\n        for (let j = 0; j < points.length; j++) {\r\n          if (i === j) continue;\r\n          \r\n          const p1 = {\r\n            x: points[i].x + positions[i].x,\r\n            y: points[i].y + positions[i].y\r\n          };\r\n          \r\n          const p2 = {\r\n            x: points[j].x + positions[j].x,\r\n            y: points[j].y + positions[j].y\r\n          };\r\n          \r\n          // calculate distance between labels\r\n          const dx = p1.x - p2.x;\r\n          const dy = p1.y - p2.y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n          \r\n          // if labels are too close, adjust them\r\n          if (distance < 25) {\r\n            const angle = Math.atan2(dy, dx);\r\n            const pushDistance = (25 - distance) / 2 + 5;\r\n            \r\n            positions[i].x += pushDistance * Math.cos(angle);\r\n            positions[i].y += pushDistance * Math.sin(angle);\r\n            positions[j].x -= pushDistance * Math.cos(angle);\r\n            positions[j].y -= pushDistance * Math.sin(angle);\r\n          }\r\n        }\r\n      }\r\n      \r\n      return positions;\r\n    }\r\n    \r\n    // draw empty chart when no regions selected\r\n    function drawEmptyChart(chartGroup, radius) {\r\n      // draw a basic grid with axes\r\n      const months = [\r\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n      ];\r\n      \r\n      const angleSlice = (Math.PI * 2) / months.length;\r\n      \r\n      // scale for radius\r\n      const rScale = d3.scaleLinear()\r\n        .range([0, radius])\r\n        .domain([0, 10]);\r\n      \r\n      // draw concentric grid circles\r\n      const gridGroup = chartGroup.append(\"g\").attr(\"class\", \"radar-grid\");\r\n      \r\n      for (let i = 2; i <= 10; i += 2) {\r\n        gridGroup.append(\"circle\")\r\n          .attr(\"r\", rScale(i))\r\n          .style(\"fill\", \"none\")\r\n          .style(\"stroke\", \"#ccc\")\r\n          .style(\"stroke-dasharray\", \"4 4\");\r\n        \r\n        gridGroup.append(\"text\")\r\n          .attr(\"x\", 5)\r\n          .attr(\"y\", -rScale(i))\r\n          .attr(\"dy\", \"0.35em\")\r\n          .style(\"font-size\", \"10px\")\r\n          .style(\"fill\", \"#666\")\r\n          .text(i);\r\n      }\r\n      \r\n      // draw axes (one for each month)\r\n      const axes = gridGroup.selectAll(\".radar-axis\")\r\n        .data(months)\r\n        .enter()\r\n        .append(\"g\")\r\n        .attr(\"class\", \"radar-axis\");\r\n      \r\n      // draw axis lines\r\n      axes.append(\"line\")\r\n        .attr(\"x1\", 0)\r\n        .attr(\"y1\", 0)\r\n        .attr(\"x2\", (d, i) => radius * Math.cos(angleSlice * i - Math.PI/2))\r\n        .attr(\"y2\", (d, i) => radius * Math.sin(angleSlice * i - Math.PI/2))\r\n        .style(\"stroke\", \"#ccc\")\r\n        .style(\"stroke-width\", \"1px\");\r\n      \r\n      // add month labels\r\n      axes.append(\"text\")\r\n        .attr(\"text-anchor\", (d, i) => {\r\n          if (i === 0 || i === 6) return \"middle\";\r\n          return (i < 6) ? \"start\" : \"end\";\r\n        })\r\n        .attr(\"x\", (d, i) => {\r\n          const angle = angleSlice * i - Math.PI/2;\r\n          const labelRadius = radius + 15;\r\n          const x = labelRadius * Math.cos(angle);\r\n          return (i > 0 && i < 6) ? x + 5 : (i > 6) ? x - 5 : x;\r\n        })\r\n        .attr(\"y\", (d, i) => {\r\n          const angle = angleSlice * i - Math.PI/2;\r\n          const labelRadius = radius + 15;\r\n          return labelRadius * Math.sin(angle);\r\n        })\r\n        .attr(\"dy\", (d, i) => {\r\n          if (i === 0) return \"-0.7em\"; \r\n          if (i === 6) return \"1em\";  \r\n          return \"0.35em\";\r\n        })\r\n        .text(d => d)\r\n        .style(\"font-size\", \"12px\")\r\n        .style(\"font-weight\", \"bold\");\r\n      \r\n      // add message to select regions\r\n      chartGroup.append(\"text\")\r\n        .attr(\"class\", \"radar-empty-message\")\r\n        .attr(\"x\", 0)\r\n        .attr(\"y\", 0)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .style(\"font-size\", \"16px\")\r\n        .style(\"fill\", \"#666\")\r\n        .text(\"Please select one or more locations to display data\");\r\n    }\r\n  }, [dateRange, selectedRegions, zoom, chartPosition, activeRegions, setChartPosition, chartPositionRef]);\r\n\r\n  return <svg ref={svgRef} className=\"radar-chart-svg\"></svg>;\r\n}","// src/components/MonthlyRadar/ZoomControls.js\r\nimport React from 'react';\r\n\r\nexport function ZoomControls({ zoom, setZoom, resetView }) {\r\n  return (\r\n    <div className=\"radar-zoom-controls\">\r\n      {/* reset button returns chart to original position and zoom */}\r\n      <button \r\n        onClick={resetView} \r\n        className=\"radar-reset-button\"\r\n      >\r\n        Reset View\r\n      </button>\r\n      \r\n      <div className=\"radar-zoom-buttons\">\r\n        {/* zoom out button */}\r\n        <button \r\n          onClick={() => {\r\n            if (zoom > 0.5) setZoom(prev => Math.max(0.5, prev - 0.2));\r\n          }} \r\n          className=\"radar-zoom-button\"\r\n        >\r\n          −\r\n        </button>\r\n        \r\n        {/* current zoom level display */}\r\n        <div className=\"radar-zoom-info\">\r\n          Zoom: {Math.round(zoom * 100)}%\r\n        </div>\r\n        \r\n        {/* zoom in button */}\r\n        <button \r\n          onClick={() => {\r\n            if (zoom < 5) setZoom(prev => Math.min(5, prev + 0.2));\r\n          }} \r\n          className=\"radar-zoom-button\"\r\n        >\r\n          +\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}","// src/components/MonthlyRadar/ChartLegend.js\r\nimport React from 'react';\r\n\r\nexport function ChartLegend({ selectedRegions, activeRegions, toggleActiveRegion }) {\r\n  // colors for the regions, matching the CSS variables\r\n  const regionColors = [\r\n    \"var(--region-color-0)\",  // blue\r\n    \"var(--region-color-1)\",  // orange\r\n    \"var(--region-color-2)\"   // green\r\n  ];\r\n  \r\n  return (\r\n    <div className=\"radar-bottom-legend\">\r\n      <h4>Legend (Click to show values)</h4>\r\n      <div className=\"radar-legend-items\">\r\n        {/* map over selected regions to create legend items */}\r\n        {selectedRegions.map((region, index) => (\r\n          <div \r\n            key={region} \r\n            className={`radar-legend-item ${activeRegions.includes(region) ? 'active' : ''}`}\r\n            onClick={() => toggleActiveRegion(region)}\r\n          >\r\n            <span \r\n              className=\"radar-region-color-dot\" \r\n              style={{backgroundColor: regionColors[index % regionColors.length]}}\r\n            >\r\n            </span>\r\n            <span className=\"radar-region-name\">{region}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}","// src/components/MonthlyRadar/index.js\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { useSessionStorage } from '../../hooks/useSessionStorage';\r\nimport { DateRangePicker } from '../shared/DateRangePicker';\r\nimport { RegionSelector } from '../shared/RegionSelector';\r\nimport { RadarChart } from './RadarChart';\r\nimport { ZoomControls } from './ZoomControls';\r\nimport { ChartLegend } from './ChartLegend';\r\nimport sharkData from '../../data/clean_shark_attacks_data.json';\r\n\r\nexport function MonthlyRadarChart() {\r\n  // -----------------------------\r\n  // state management with session storage\r\n  // -----------------------------\r\n  // date range for filtering data\r\n  const [dateRange, setDateRange] = useSessionStorage(\r\n    'monthlyRadarDateRange',\r\n    { start: 1900, end: 2023 }\r\n  );\r\n  \r\n  // selected regions for comparison\r\n  const [selectedRegions, setSelectedRegions] = useSessionStorage(\r\n    'monthlyRadarSelectedRegions',\r\n    []\r\n  );\r\n  \r\n  // all available regions from the dataset\r\n  const [allRegions, setAllRegions] = useState([]);\r\n  \r\n  // count of attacks by region\r\n  const [regionCounts, setRegionCounts] = useState({});\r\n  \r\n  // sorting method for region display\r\n  const [sortOrder, setSortOrder] = useSessionStorage(\r\n    'monthlyRadarSortOrder',\r\n    'alphabetical'\r\n  );\r\n  \r\n  // zoom level for radar chart\r\n  const [zoom, setZoom] = useSessionStorage(\r\n    'monthlyRadarZoom',\r\n    1\r\n  );\r\n  \r\n  // position of radar chart (for panning)\r\n  const [chartPosition, setChartPosition] = useSessionStorage(\r\n    'monthlyRadarChartPosition',\r\n    { x: 0, y: 0 }\r\n  );\r\n  \r\n  // regions that are active (showing values)\r\n  const [activeRegions, setActiveRegions] = useSessionStorage(\r\n    'monthlyRadarActiveRegions',\r\n    []\r\n  );\r\n  \r\n  // ref to store the current chart position without triggering re-renders\r\n  const chartPositionRef = useRef(chartPosition);\r\n  \r\n  // -----------------------------\r\n  // data processing\r\n  // -----------------------------\r\n  // load regions and count attacks for each\r\n  useEffect(() => {\r\n    // parse dates and filter by date range\r\n    const parsedData = sharkData.map(d => ({\r\n      ...d,\r\n      Date: d.Date ? new Date(d.Date) : null\r\n    })).filter(d => {\r\n      if (!d.Date) return false;\r\n      const attackYear = d.Date.getFullYear();\r\n      return attackYear >= dateRange.start && attackYear <= dateRange.end;\r\n    });\r\n\r\n    // count attacks by region\r\n    const counts = {};\r\n    parsedData.forEach(d => {\r\n      if (!d.Country) return;\r\n      counts[d.Country] = (counts[d.Country] || 0) + 1;\r\n    });\r\n    \r\n    // calculate total for GLOBAL option\r\n    const globalTotal = parsedData.length;\r\n    counts[\"GLOBAL\"] = globalTotal;\r\n    \r\n    setRegionCounts(counts);\r\n    \r\n    // sort regions based on selected order\r\n    let regions = Object.keys(counts).filter(Boolean);\r\n    regions = sortOrder === 'alphabetical' \r\n      ? regions.sort() \r\n      : regions.sort((a, b) => counts[b] - counts[a]);\r\n    \r\n    setAllRegions(regions);\r\n  }, [dateRange, sortOrder]);\r\n  \r\n  // update ref when state changes\r\n  useEffect(() => {\r\n    chartPositionRef.current = chartPosition;\r\n  }, [chartPosition]);\r\n  \r\n  // -----------------------------\r\n  // event handlers\r\n  // -----------------------------\r\n  // reset zoom level and position\r\n  const resetView = () => {\r\n    setZoom(1);\r\n    setChartPosition({ x: 0, y: 0 });\r\n    chartPositionRef.current = { x: 0, y: 0 }; // also reset the ref\r\n  };\r\n  \r\n  // toggle region in active regions list (for legend)\r\n  const toggleActiveRegion = (region) => {\r\n    setActiveRegions(prev => {\r\n      if (prev.includes(region)) {\r\n        return prev.filter(r => r !== region);\r\n      } else {\r\n        return [...prev, region];\r\n      }\r\n    });\r\n  };\r\n  \r\n  return (\r\n    <div className=\"radar-visualization-container\">\r\n      {/* -----------------------------\r\n          main chart area\r\n          ----------------------------- */}\r\n      <div className=\"radar-chart-container\">\r\n        <div className=\"radar-chart-wrapper\">\r\n          <RadarChart \r\n            dateRange={dateRange}\r\n            selectedRegions={selectedRegions}\r\n            zoom={zoom}\r\n            chartPosition={chartPosition}\r\n            chartPositionRef={chartPositionRef}\r\n            setChartPosition={setChartPosition}\r\n            activeRegions={activeRegions}\r\n          />\r\n        </div>\r\n        \r\n        {/* legend for toggling value display, only shown if regions are selected */}\r\n        {selectedRegions.length > 0 && (\r\n          <ChartLegend \r\n            selectedRegions={selectedRegions}\r\n            activeRegions={activeRegions}\r\n            toggleActiveRegion={toggleActiveRegion}\r\n          />\r\n        )}\r\n        \r\n        {/* zoom controls for chart manipulation */}\r\n        <ZoomControls \r\n          zoom={zoom}\r\n          setZoom={setZoom}\r\n          resetView={resetView}\r\n        />\r\n      </div>\r\n      \r\n      {/* -----------------------------\r\n          options sidebar\r\n          ----------------------------- */}\r\n      <div className=\"radar-sidebar\">\r\n        <div className=\"radar-options-section\">\r\n          <h3>Chart Options</h3>\r\n          \r\n          {/* date range selector */}\r\n          <DateRangePicker \r\n            dateRange={dateRange}\r\n            onDateRangeChange={setDateRange}\r\n            className=\"radar-date-range-controls\"\r\n          />\r\n          \r\n          {/* region selector */}\r\n          <RegionSelector \r\n            title=\"Locations (maximum of 3)\"\r\n            regions={allRegions}\r\n            selectedRegions={selectedRegions}\r\n            onSelectionChange={setSelectedRegions}\r\n            maxSelections={3}\r\n            sortOrder={sortOrder}\r\n            onSortOrderChange={setSortOrder}\r\n            regionCounts={regionCounts}\r\n            className=\"radar-region-selector\"\r\n            searchPlaceholder=\"Search locations...\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","// src/components/AboutApp/index.js\r\nimport React from 'react';\r\n\r\nexport function AboutApp({ isOpen, onClose }) {\r\n // if modal is not open, don't render anything\r\n if (!isOpen) return null;\r\n \r\n return (\r\n   <div className=\"about-app-modal\">\r\n     <div className=\"about-app-content\">\r\n       {/* close button in the top right corner */}\r\n       <button className=\"close-button\" onClick={onClose}>×</button>\r\n       \r\n       <h2>About the App</h2>\r\n       \r\n       {/* -----------------------------\r\n           app overview section\r\n           ----------------------------- */}\r\n       <section>\r\n         <h3>Overview</h3>\r\n         <p>\r\n           This application visualizes global shark attack data from 1900 to 2023, allowing you to explore patterns\r\n           and trends across different locations, time periods, and metrics. Locations can be countries (in most cases) \r\n           or broader regions (like North Pacific Ocean).\r\n         </p>\r\n       </section>\r\n       \r\n       {/* -----------------------------\r\n           usage instructions section\r\n           ----------------------------- */}\r\n       <section>\r\n         <h3>How to Use</h3>\r\n         <h4>Global Summary Tab</h4>\r\n         <p>\r\n           Provides an overview of shark attacks with fatality statistics, geographic distribution, and historical trends.\r\n           You can select up to 3 locations to compare attack trends over time. In the pie chart, locations \r\n           that contribute less than 5% of total attacks are grouped into the \"Others\" category.\r\n         </p>\r\n         \r\n         <h4>Fatality by Location Tab</h4>\r\n         <p>\r\n           Displays detailed location-specific data with interactive bar charts showing fatality status.\r\n           Use the year slider to see how attacks evolved through time, or select custom locations to compare.\r\n         </p>\r\n         \r\n         <h4>Monthly Patterns Tab</h4>\r\n         <p>\r\n           Visualizes the seasonal distribution of shark attacks with an interactive radar chart.\r\n           Select up to 3 locations to compare monthly attack patterns, and use zoom/pan controls to explore the data.\r\n         </p>\r\n       </section>\r\n       \r\n       {/* -----------------------------\r\n           data sources section\r\n           ----------------------------- */}\r\n       <section>\r\n         <h3>Data Sources</h3>\r\n         <p>\r\n           Data is sourced from the Global Shark Attack File (GSAF) via OpenDataSoft's Public Data Portal. \r\n           The dataset contains shark attack incidents from around the world, with location information that may refer\r\n           to countries or broader geographic regions.\r\n         </p>\r\n         <p>\r\n           The data was cleaned and processed to standardize location names, remove incomplete entries, \r\n           and formatted it for interactive visualization.\r\n         </p>\r\n       </section>\r\n       \r\n       {/* -----------------------------\r\n           limitations section\r\n           ----------------------------- */}\r\n       <section>\r\n         <h3>Limitations</h3>\r\n         <p>\r\n           When exploring this application, please note that the data presented stems from shark attack reports. While shark attacks are a rare occurrence, it is possible that some incidents were never reported. As such, this dataset should be interpreted with caution. Specifically, the following limitations apply:\r\n         </p>\r\n         <ul style={{textAlign: 'left'}}>\r\n           <li><strong>Reporting disparities:</strong> Many locations lack robust reporting systems or internet access, leading to underreporting of attacks in developing regions.</li>\r\n           <li><strong>Historical bias:</strong> Although the dataset originally contained records before 1900, these were excluded due to extreme incompleteness. Even records from 1900-1950 are less standardized than modern data.</li>\r\n           <li><strong>Media attention bias:</strong> Attacks in tourist destinations or developed countries receive more coverage and are more likely to be recorded in the database.</li>\r\n         </ul>\r\n         <p>\r\n           These visualization tools are intended for exploratory purposes, rather than as definitive accounts of global shark attack patterns.\r\n         </p>\r\n       </section>\r\n       \r\n       {/* developer contact information */}\r\n       <footer>\r\n         <p>\r\n           Developed by Anton Trublin<br />\r\n           contact: atrublin@gmail.com\r\n         </p>\r\n       </footer>\r\n     </div>\r\n   </div>\r\n );\r\n}","// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { GlobalSummaryChart } from './components/GlobalSummary';\nimport { CountryBarChart } from './components/CountryBar';\nimport { MonthlyRadarChart } from './components/MonthlyRadar';\nimport { AboutApp } from './components/AboutApp';\n\nfunction App() {\n  // -----------------------------\n  // state management\n  // -----------------------------\n  // retrieves active tab from session storage or defaults to global summary\n  const [activeTab, setActiveTab] = useState(() => {\n    return sessionStorage.getItem('activeSharkTab') || 'global-summary';\n  });\n  \n  // tracks whether each visualization has been rendered at least once\n  const [hasRenderedGlobal, setHasRenderedGlobal] = useState(false);\n  const [hasRenderedCountry, setHasRenderedCountry] = useState(false);\n  const [hasRenderedMonthly, setHasRenderedMonthly] = useState(false);\n  \n  // state for about app modal visibility\n  const [isAboutOpen, setIsAboutOpen] = useState(false);\n  \n  // -----------------------------\n  // effects\n  // -----------------------------\n  // save active tab to session storage and update render flags\n  useEffect(() => {\n    // store current tab in session storage\n    sessionStorage.setItem('activeSharkTab', activeTab);\n    \n    // update render flags when their respective tabs are active\n    if (activeTab === 'global-summary' && !hasRenderedGlobal) {\n      setHasRenderedGlobal(true);\n    } else if (activeTab === 'country' && !hasRenderedCountry) {\n      setHasRenderedCountry(true);\n    } else if (activeTab === 'monthly' && !hasRenderedMonthly) {\n      setHasRenderedMonthly(true);\n    }\n  }, [activeTab, hasRenderedGlobal, hasRenderedCountry, hasRenderedMonthly]);\n  \n  return (\n    <div className=\"App\">\n      {/* -----------------------------\n          app header with navigation tabs\n          ----------------------------- */}\n      <header className=\"App-header\">\n        <h1>Interactive Explorer of Global Shark Attack Data</h1>\n        <div className=\"header-content\">\n          <div className=\"chart-tabs\">\n            <button \n              className={`chart-tab ${activeTab === 'global-summary' ? 'active' : ''}`}\n              onClick={() => setActiveTab('global-summary')}\n            >\n              Global Summary\n            </button>\n            <button \n              className={`chart-tab ${activeTab === 'country' ? 'active' : ''}`}\n              onClick={() => setActiveTab('country')}\n            >\n              Fatality by Location\n            </button>\n            <button \n              className={`chart-tab ${activeTab === 'monthly' ? 'active' : ''}`}\n              onClick={() => setActiveTab('monthly')}\n            >\n              Monthly Patterns\n            </button>\n          </div>\n          \n          {/* about app link */}\n          <span \n            className=\"about-app-link\"\n            onClick={() => setIsAboutOpen(true)}\n          >\n            About the App\n          </span>\n        </div>\n      </header>\n      \n      {/* -----------------------------\n          main content area with visualization components,\n          only render if tabs are active or have been rendered before\n          ----------------------------- */}\n      <main>\n        {/* eslint-disable-next-line no-unused-vars */}\n        {/* global summary line chart visualization */}\n        <div style={{ display: activeTab === 'global-summary' ? 'block' : 'none' }}>\n          {(hasRenderedGlobal || activeTab === 'global-summary') && <GlobalSummaryChart />}\n        </div>\n        \n        {/* country bar chart visualization */}\n        <div style={{ display: activeTab === 'country' ? 'block' : 'none' }}>\n          {(hasRenderedCountry || activeTab === 'country') && <CountryBarChart />}\n        </div>\n        \n        {/* monthly patterns radar chart visualization */}\n        <div style={{ display: activeTab === 'monthly' ? 'block' : 'none' }}>\n          {(hasRenderedMonthly || activeTab === 'monthly') && <MonthlyRadarChart />}\n        </div>\n      </main>\n      \n      {/* about app modal, conditionally rendered based on isAboutOpen state */}\n      <AboutApp \n        isOpen={isAboutOpen} \n        onClose={() => setIsAboutOpen(false)} \n      />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}